
SIMONSAYS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00802000  000019aa  00001a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a2  0080200a  0080200a  00001a48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  00001a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033b0  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b65  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028f0  00000000  00000000  00005bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007d0  00000000  00000000  000084a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00028f7b  00000000  00000000  00008c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f6f  00000000  00000000  00031bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00033b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009808  00000000  00000000  00033d18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c7       	rjmp	.+3714   	; 0xe8c <__vector_2>
       a:	00 00       	nop
       c:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__vector_3>
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	02 c1       	rjmp	.+516    	; 0x23e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	00 c1       	rjmp	.+512    	; 0x23e <__bad_interrupt>
      3e:	00 00       	nop
      40:	fe c0       	rjmp	.+508    	; 0x23e <__bad_interrupt>
      42:	00 00       	nop
      44:	fc c0       	rjmp	.+504    	; 0x23e <__bad_interrupt>
      46:	00 00       	nop
      48:	fa c0       	rjmp	.+500    	; 0x23e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f8 c0       	rjmp	.+496    	; 0x23e <__bad_interrupt>
      4e:	00 00       	nop
      50:	f6 c0       	rjmp	.+492    	; 0x23e <__bad_interrupt>
      52:	00 00       	nop
      54:	f4 c0       	rjmp	.+488    	; 0x23e <__bad_interrupt>
      56:	00 00       	nop
      58:	f2 c0       	rjmp	.+484    	; 0x23e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f0 c0       	rjmp	.+480    	; 0x23e <__bad_interrupt>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d0 c0       	rjmp	.+416    	; 0x23e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ce c0       	rjmp	.+412    	; 0x23e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cc c0       	rjmp	.+408    	; 0x23e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ca c0       	rjmp	.+404    	; 0x23e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c0 c0       	rjmp	.+384    	; 0x23e <__bad_interrupt>
      be:	00 00       	nop
      c0:	be c0       	rjmp	.+380    	; 0x23e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bc c0       	rjmp	.+376    	; 0x23e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ba c0       	rjmp	.+372    	; 0x23e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b8 c0       	rjmp	.+368    	; 0x23e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b6 c0       	rjmp	.+364    	; 0x23e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b4 c0       	rjmp	.+360    	; 0x23e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b2 c0       	rjmp	.+356    	; 0x23e <__bad_interrupt>
      da:	00 00       	nop
      dc:	b0 c0       	rjmp	.+352    	; 0x23e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ae c0       	rjmp	.+348    	; 0x23e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_64>
     104:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__vector_65>
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	90 c0       	rjmp	.+288    	; 0x23e <__bad_interrupt>
     11e:	00 00       	nop
     120:	8e c0       	rjmp	.+284    	; 0x23e <__bad_interrupt>
     122:	00 00       	nop
     124:	8c c0       	rjmp	.+280    	; 0x23e <__bad_interrupt>
     126:	00 00       	nop
     128:	8a c0       	rjmp	.+276    	; 0x23e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	84 c0       	rjmp	.+264    	; 0x23e <__bad_interrupt>
     136:	00 00       	nop
     138:	82 c0       	rjmp	.+260    	; 0x23e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	80 c0       	rjmp	.+256    	; 0x23e <__bad_interrupt>
     13e:	00 00       	nop
     140:	7e c0       	rjmp	.+252    	; 0x23e <__bad_interrupt>
     142:	00 00       	nop
     144:	7c c0       	rjmp	.+248    	; 0x23e <__bad_interrupt>
     146:	00 00       	nop
     148:	7a c0       	rjmp	.+244    	; 0x23e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	78 c0       	rjmp	.+240    	; 0x23e <__bad_interrupt>
     14e:	00 00       	nop
     150:	76 c0       	rjmp	.+236    	; 0x23e <__bad_interrupt>
     152:	00 00       	nop
     154:	74 c0       	rjmp	.+232    	; 0x23e <__bad_interrupt>
     156:	00 00       	nop
     158:	72 c0       	rjmp	.+228    	; 0x23e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	46 c0       	rjmp	.+140    	; 0x23e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	44 c0       	rjmp	.+136    	; 0x23e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	42 c0       	rjmp	.+132    	; 0x23e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	40 c0       	rjmp	.+128    	; 0x23e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3e c0       	rjmp	.+124    	; 0x23e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3c c0       	rjmp	.+120    	; 0x23e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	24 c0       	rjmp	.+72     	; 0x23e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	22 c0       	rjmp	.+68     	; 0x23e <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ea ea       	ldi	r30, 0xAA	; 170
     214:	f9 e1       	ldi	r31, 0x19	; 25
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	aa 30       	cpi	r26, 0x0A	; 10
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	21 e2       	ldi	r18, 0x21	; 33
     228:	aa e0       	ldi	r26, 0x0A	; 10
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	ac 3a       	cpi	r26, 0xAC	; 172
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <main>
     23a:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	80 93 70 00 	sts	0x0070, r24
     246:	80 93 71 00 	sts	0x0071, r24
     24a:	80 93 72 00 	sts	0x0072, r24
     24e:	80 93 73 00 	sts	0x0073, r24
     252:	80 93 74 00 	sts	0x0074, r24
     256:	80 93 75 00 	sts	0x0075, r24
     25a:	80 93 76 00 	sts	0x0076, r24
     25e:	08 95       	ret

00000260 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	fc 01       	movw	r30, r24
     266:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     26c:	c6 2f       	mov	r28, r22
     26e:	d0 e0       	ldi	r29, 0x00	; 0
     270:	de 01       	movw	r26, r28
     272:	02 2e       	mov	r0, r18
     274:	02 c0       	rjmp	.+4      	; 0x27a <ioport_configure_port_pin+0x1a>
     276:	b5 95       	asr	r27
     278:	a7 95       	ror	r26
     27a:	0a 94       	dec	r0
     27c:	e2 f7       	brpl	.-8      	; 0x276 <ioport_configure_port_pin+0x16>
     27e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     280:	50 83       	st	Z, r21
     282:	2f 5f       	subi	r18, 0xFF	; 255
     284:	3f 4f       	sbci	r19, 0xFF	; 255
     286:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     288:	28 30       	cpi	r18, 0x08	; 8
     28a:	31 05       	cpc	r19, r1
     28c:	89 f7       	brne	.-30     	; 0x270 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     28e:	40 ff       	sbrs	r20, 0
     290:	0a c0       	rjmp	.+20     	; 0x2a6 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     292:	41 ff       	sbrs	r20, 1
     294:	03 c0       	rjmp	.+6      	; 0x29c <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     296:	fc 01       	movw	r30, r24
     298:	65 83       	std	Z+5, r22	; 0x05
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     29c:	fc 01       	movw	r30, r24
     29e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     2a0:	fc 01       	movw	r30, r24
     2a2:	61 83       	std	Z+1, r22	; 0x01
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     2a6:	fc 01       	movw	r30, r24
     2a8:	62 83       	std	Z+2, r22	; 0x02
	}
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     2b0:	43 e0       	ldi	r20, 0x03	; 3
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 ee       	ldi	r24, 0xE0	; 224
     2b8:	97 e0       	ldi	r25, 0x07	; 7
     2ba:	d2 df       	rcall	.-92     	; 0x260 <ioport_configure_port_pin>
     2bc:	43 e0       	ldi	r20, 0x03	; 3
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	80 ee       	ldi	r24, 0xE0	; 224
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	cc df       	rcall	.-104    	; 0x260 <ioport_configure_port_pin>
     2c8:	43 e0       	ldi	r20, 0x03	; 3
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	60 e1       	ldi	r22, 0x10	; 16
     2ce:	80 e6       	ldi	r24, 0x60	; 96
     2d0:	96 e0       	ldi	r25, 0x06	; 6
     2d2:	c6 df       	rcall	.-116    	; 0x260 <ioport_configure_port_pin>
     2d4:	41 e0       	ldi	r20, 0x01	; 1
     2d6:	50 e4       	ldi	r21, 0x40	; 64
     2d8:	60 e2       	ldi	r22, 0x20	; 32
     2da:	80 e6       	ldi	r24, 0x60	; 96
     2dc:	96 e0       	ldi	r25, 0x06	; 6
     2de:	c0 df       	rcall	.-128    	; 0x260 <ioport_configure_port_pin>
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	5b e1       	ldi	r21, 0x1B	; 27
     2e4:	60 e2       	ldi	r22, 0x20	; 32
     2e6:	80 e8       	ldi	r24, 0x80	; 128
     2e8:	96 e0       	ldi	r25, 0x06	; 6
     2ea:	ba df       	rcall	.-140    	; 0x260 <ioport_configure_port_pin>
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	5b e1       	ldi	r21, 0x1B	; 27
     2f0:	62 e0       	ldi	r22, 0x02	; 2
     2f2:	80 ea       	ldi	r24, 0xA0	; 160
     2f4:	96 e0       	ldi	r25, 0x06	; 6
     2f6:	b4 df       	rcall	.-152    	; 0x260 <ioport_configure_port_pin>
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	5b e1       	ldi	r21, 0x1B	; 27
     2fc:	64 e0       	ldi	r22, 0x04	; 4
     2fe:	80 ea       	ldi	r24, 0xA0	; 160
     300:	96 e0       	ldi	r25, 0x06	; 6
     302:	ae df       	rcall	.-164    	; 0x260 <ioport_configure_port_pin>
     304:	43 e0       	ldi	r20, 0x03	; 3
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	62 e0       	ldi	r22, 0x02	; 2
     30a:	80 e6       	ldi	r24, 0x60	; 96
     30c:	96 e0       	ldi	r25, 0x06	; 6
     30e:	a8 df       	rcall	.-176    	; 0x260 <ioport_configure_port_pin>
     310:	43 e0       	ldi	r20, 0x03	; 3
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	68 e0       	ldi	r22, 0x08	; 8
     316:	80 e6       	ldi	r24, 0x60	; 96
     318:	96 e0       	ldi	r25, 0x06	; 6
     31a:	a2 df       	rcall	.-188    	; 0x260 <ioport_configure_port_pin>
     31c:	43 e0       	ldi	r20, 0x03	; 3
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	68 e0       	ldi	r22, 0x08	; 8
     322:	80 ea       	ldi	r24, 0xA0	; 160
     324:	96 e0       	ldi	r25, 0x06	; 6
     326:	9c df       	rcall	.-200    	; 0x260 <ioport_configure_port_pin>
     328:	43 e0       	ldi	r20, 0x03	; 3
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	80 e6       	ldi	r24, 0x60	; 96
     330:	96 e0       	ldi	r25, 0x06	; 6
     332:	96 df       	rcall	.-212    	; 0x260 <ioport_configure_port_pin>
     334:	43 e0       	ldi	r20, 0x03	; 3
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	68 e0       	ldi	r22, 0x08	; 8
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	96 e0       	ldi	r25, 0x06	; 6
     33e:	90 df       	rcall	.-224    	; 0x260 <ioport_configure_port_pin>
     340:	41 e0       	ldi	r20, 0x01	; 1
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	60 e1       	ldi	r22, 0x10	; 16
     346:	80 e8       	ldi	r24, 0x80	; 128
     348:	96 e0       	ldi	r25, 0x06	; 6
     34a:	8a df       	rcall	.-236    	; 0x260 <ioport_configure_port_pin>
     34c:	43 e0       	ldi	r20, 0x03	; 3
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	62 e0       	ldi	r22, 0x02	; 2
     352:	80 e6       	ldi	r24, 0x60	; 96
     354:	96 e0       	ldi	r25, 0x06	; 6
     356:	84 df       	rcall	.-248    	; 0x260 <ioport_configure_port_pin>
     358:	43 e0       	ldi	r20, 0x03	; 3
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	68 e0       	ldi	r22, 0x08	; 8
     35e:	80 e6       	ldi	r24, 0x60	; 96
     360:	96 e0       	ldi	r25, 0x06	; 6
     362:	7e df       	rcall	.-260    	; 0x260 <ioport_configure_port_pin>
     364:	40 e0       	ldi	r20, 0x00	; 0
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	64 e0       	ldi	r22, 0x04	; 4
     36a:	80 e6       	ldi	r24, 0x60	; 96
     36c:	96 e0       	ldi	r25, 0x06	; 6
     36e:	78 df       	rcall	.-272    	; 0x260 <ioport_configure_port_pin>
     370:	43 e0       	ldi	r20, 0x03	; 3
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	60 e1       	ldi	r22, 0x10	; 16
     376:	80 ea       	ldi	r24, 0xA0	; 160
     378:	96 e0       	ldi	r25, 0x06	; 6
     37a:	72 df       	rcall	.-284    	; 0x260 <ioport_configure_port_pin>
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	96 e0       	ldi	r25, 0x06	; 6
     386:	6c df       	rcall	.-296    	; 0x260 <ioport_configure_port_pin>
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	64 e0       	ldi	r22, 0x04	; 4
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	96 e0       	ldi	r25, 0x06	; 6
     392:	66 df       	rcall	.-308    	; 0x260 <ioport_configure_port_pin>
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	62 e0       	ldi	r22, 0x02	; 2
     39a:	80 e2       	ldi	r24, 0x20	; 32
     39c:	96 e0       	ldi	r25, 0x06	; 6
     39e:	60 df       	rcall	.-320    	; 0x260 <ioport_configure_port_pin>
     3a0:	43 e0       	ldi	r20, 0x03	; 3
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	68 e0       	ldi	r22, 0x08	; 8
     3a6:	80 e4       	ldi	r24, 0x40	; 64
     3a8:	96 e0       	ldi	r25, 0x06	; 6
     3aa:	5a df       	rcall	.-332    	; 0x260 <ioport_configure_port_pin>
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	64 e0       	ldi	r22, 0x04	; 4
     3b2:	80 e4       	ldi	r24, 0x40	; 64
     3b4:	96 e0       	ldi	r25, 0x06	; 6
     3b6:	54 df       	rcall	.-344    	; 0x260 <ioport_configure_port_pin>
     3b8:	43 e0       	ldi	r20, 0x03	; 3
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	68 e0       	ldi	r22, 0x08	; 8
     3be:	80 e6       	ldi	r24, 0x60	; 96
     3c0:	96 e0       	ldi	r25, 0x06	; 6
     3c2:	4e df       	rcall	.-356    	; 0x260 <ioport_configure_port_pin>
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	64 e0       	ldi	r22, 0x04	; 4
     3ca:	80 e6       	ldi	r24, 0x60	; 96
     3cc:	96 e0       	ldi	r25, 0x06	; 6
     3ce:	48 df       	rcall	.-368    	; 0x260 <ioport_configure_port_pin>
     3d0:	43 e0       	ldi	r20, 0x03	; 3
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	68 e0       	ldi	r22, 0x08	; 8
     3d6:	80 e8       	ldi	r24, 0x80	; 128
     3d8:	96 e0       	ldi	r25, 0x06	; 6
     3da:	42 df       	rcall	.-380    	; 0x260 <ioport_configure_port_pin>
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	64 e0       	ldi	r22, 0x04	; 4
     3e2:	80 e8       	ldi	r24, 0x80	; 128
     3e4:	96 e0       	ldi	r25, 0x06	; 6
     3e6:	3c cf       	rjmp	.-392    	; 0x260 <ioport_configure_port_pin>
     3e8:	08 95       	ret

000003ea <getRandomNumber>:
}

// Generates a random number between 0 - 3 and returns the result back to the caller.
int getRandomNumber(void)
{
	int randomNumber = rand() % 4;
     3ea:	0e 94 35 0c 	call	0x186a	; 0x186a <rand>
     3ee:	83 70       	andi	r24, 0x03	; 3
     3f0:	90 78       	andi	r25, 0x80	; 128
     3f2:	99 23       	and	r25, r25
     3f4:	24 f4       	brge	.+8      	; 0x3fe <getRandomNumber+0x14>
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	8c 6f       	ori	r24, 0xFC	; 252
     3fa:	9f 6f       	ori	r25, 0xFF	; 255
     3fc:	01 96       	adiw	r24, 0x01	; 1
	
	return randomNumber;
}
     3fe:	08 95       	ret

00000400 <lightShow>:

void lightShow(void)
{
	if(crazyShit == 1)
     400:	80 91 0e 20 	lds	r24, 0x200E
     404:	90 91 0f 20 	lds	r25, 0x200F
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	29 f4       	brne	.+10     	; 0x416 <lightShow+0x16>
	{
		crazyShit = 0;
     40c:	10 92 0e 20 	sts	0x200E, r1
     410:	10 92 0f 20 	sts	0x200F, r1
     414:	08 95       	ret
	}
	else
	{
		crazyShit = 1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	80 93 0e 20 	sts	0x200E, r24
     41e:	90 93 0f 20 	sts	0x200F, r25
     422:	08 95       	ret

00000424 <addSequenceElement>:
	}
}

// Adds a random light to the sequence in the next available position.
void addSequenceElement(void)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
	memorySequence[count] = getRandomNumber();
     428:	c0 91 aa 21 	lds	r28, 0x21AA
     42c:	d0 91 ab 21 	lds	r29, 0x21AB
     430:	dc df       	rcall	.-72     	; 0x3ea <getRandomNumber>
     432:	cc 0f       	add	r28, r28
     434:	dd 1f       	adc	r29, r29
     436:	ca 5e       	subi	r28, 0xEA	; 234
     438:	df 4d       	sbci	r29, 0xDF	; 223
     43a:	88 83       	st	Y, r24
     43c:	99 83       	std	Y+1, r25	; 0x01
	count++;
     43e:	80 91 aa 21 	lds	r24, 0x21AA
     442:	90 91 ab 21 	lds	r25, 0x21AB
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	80 93 aa 21 	sts	0x21AA, r24
     44c:	90 93 ab 21 	sts	0x21AB, r25
	
	return;
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <gameOver>:
	return;
}

// Flashes the LEDs 4 times in order to display a game over indication.
void gameOver(void)
{
     456:	4f 92       	push	r4
     458:	5f 92       	push	r5
     45a:	6f 92       	push	r6
     45c:	7f 92       	push	r7
     45e:	8f 92       	push	r8
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
	int i = 0;
	globalDelay = INIT_DELAY;
     476:	88 ec       	ldi	r24, 0xC8	; 200
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	80 93 08 20 	sts	0x2008, r24
     47e:	90 93 09 20 	sts	0x2009, r25
     482:	68 94       	set
     484:	88 24       	eor	r8, r8
     486:	82 f8       	bld	r8, 2
     488:	91 2c       	mov	r9, r1
	
	for(i = 0; i < 4; i++)
	{
		TOGGLE(PORTA.OUT, WHITE_LED);
     48a:	c0 e0       	ldi	r28, 0x00	; 0
     48c:	d6 e0       	ldi	r29, 0x06	; 6
     48e:	68 94       	set
     490:	66 24       	eor	r6, r6
     492:	62 f8       	bld	r6, 2
		TOGGLE(PORTA.OUT, RED_LED);
     494:	68 94       	set
     496:	77 24       	eor	r7, r7
     498:	73 f8       	bld	r7, 3
		TOGGLE(PORTA.OUT, GREEN_LED);
     49a:	55 24       	eor	r5, r5
     49c:	53 94       	inc	r5
		TOGGLE(PORTA.OUT, BLUE_LED);
     49e:	68 94       	set
     4a0:	44 24       	eor	r4, r4
     4a2:	41 f8       	bld	r4, 1
	int i = 0;
	globalDelay = INIT_DELAY;
	
	for(i = 0; i < 4; i++)
	{
		TOGGLE(PORTA.OUT, WHITE_LED);
     4a4:	8c 81       	ldd	r24, Y+4	; 0x04
     4a6:	86 25       	eor	r24, r6
     4a8:	8c 83       	std	Y+4, r24	; 0x04
		TOGGLE(PORTA.OUT, RED_LED);
     4aa:	8c 81       	ldd	r24, Y+4	; 0x04
     4ac:	87 25       	eor	r24, r7
     4ae:	8c 83       	std	Y+4, r24	; 0x04
		TOGGLE(PORTA.OUT, GREEN_LED);
     4b0:	8c 81       	ldd	r24, Y+4	; 0x04
     4b2:	85 25       	eor	r24, r5
     4b4:	8c 83       	std	Y+4, r24	; 0x04
		TOGGLE(PORTA.OUT, BLUE_LED);
     4b6:	8c 81       	ldd	r24, Y+4	; 0x04
     4b8:	84 25       	eor	r24, r4
     4ba:	8c 83       	std	Y+4, r24	; 0x04
		delay_ms(globalDelay);
     4bc:	f0 91 09 20 	lds	r31, 0x2009
     4c0:	a0 91 08 20 	lds	r26, 0x2008
     4c4:	ef 2f       	mov	r30, r31
     4c6:	ee 0f       	add	r30, r30
     4c8:	ee 0b       	sbc	r30, r30
     4ca:	2a 2f       	mov	r18, r26
     4cc:	3f 2f       	mov	r19, r31
     4ce:	4e 2f       	mov	r20, r30
     4d0:	5e 2f       	mov	r21, r30
     4d2:	6e 2f       	mov	r22, r30
     4d4:	7e 2f       	mov	r23, r30
     4d6:	8e 2f       	mov	r24, r30
     4d8:	9e 2f       	mov	r25, r30
     4da:	05 e0       	ldi	r16, 0x05	; 5
     4dc:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__ashldi3>
     4e0:	aa 2e       	mov	r10, r26
     4e2:	bf 2e       	mov	r11, r31
     4e4:	ce 2e       	mov	r12, r30
     4e6:	de 2e       	mov	r13, r30
     4e8:	ee 2e       	mov	r14, r30
     4ea:	fe 2e       	mov	r15, r30
     4ec:	0e 2f       	mov	r16, r30
     4ee:	1e 2f       	mov	r17, r30
     4f0:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__subdi3>
     4f4:	a2 2e       	mov	r10, r18
     4f6:	b3 2e       	mov	r11, r19
     4f8:	c4 2e       	mov	r12, r20
     4fa:	d5 2e       	mov	r13, r21
     4fc:	e6 2e       	mov	r14, r22
     4fe:	f7 2e       	mov	r15, r23
     500:	b8 2f       	mov	r27, r24
     502:	19 2f       	mov	r17, r25
     504:	06 e0       	ldi	r16, 0x06	; 6
     506:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__ashldi3>
     50a:	0b 2f       	mov	r16, r27
     50c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__subdi3>
     510:	03 e0       	ldi	r16, 0x03	; 3
     512:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__ashldi3>
     516:	aa 2e       	mov	r10, r26
     518:	bf 2e       	mov	r11, r31
     51a:	ce 2e       	mov	r12, r30
     51c:	de 2e       	mov	r13, r30
     51e:	ee 2e       	mov	r14, r30
     520:	fe 2e       	mov	r15, r30
     522:	0e 2f       	mov	r16, r30
     524:	1e 2f       	mov	r17, r30
     526:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__adddi3>
     52a:	07 e0       	ldi	r16, 0x07	; 7
     52c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__ashldi3>
     530:	29 51       	subi	r18, 0x19	; 25
     532:	3c 4f       	sbci	r19, 0xFC	; 252
     534:	4f 4f       	sbci	r20, 0xFF	; 255
     536:	5f 4f       	sbci	r21, 0xFF	; 255
     538:	6f 4f       	sbci	r22, 0xFF	; 255
     53a:	7f 4f       	sbci	r23, 0xFF	; 255
     53c:	8f 4f       	sbci	r24, 0xFF	; 255
     53e:	9f 4f       	sbci	r25, 0xFF	; 255
     540:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatundisf>
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e8       	ldi	r19, 0x80	; 128
     548:	4b eb       	ldi	r20, 0xBB	; 187
     54a:	55 e4       	ldi	r21, 0x45	; 69
     54c:	d9 d7       	rcall	.+4018   	; 0x1500 <__divsf3>
     54e:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fixunssfdi>
     552:	f2 2f       	mov	r31, r18
     554:	e3 2f       	mov	r30, r19
     556:	8f 2f       	mov	r24, r31
     558:	9e 2f       	mov	r25, r30
     55a:	a4 2f       	mov	r26, r20
     55c:	b5 2f       	mov	r27, r21
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	a1 09       	sbc	r26, r1
     562:	b1 09       	sbc	r27, r1
     564:	00 97       	sbiw	r24, 0x00	; 0
     566:	a1 05       	cpc	r26, r1
     568:	b1 05       	cpc	r27, r1
     56a:	c9 f7       	brne	.-14     	; 0x55e <gameOver+0x108>
		TOGGLE(PORTA.OUT, WHITE_LED);
     56c:	8c 81       	ldd	r24, Y+4	; 0x04
     56e:	86 25       	eor	r24, r6
     570:	8c 83       	std	Y+4, r24	; 0x04
		TOGGLE(PORTA.OUT, RED_LED);
     572:	8c 81       	ldd	r24, Y+4	; 0x04
     574:	87 25       	eor	r24, r7
     576:	8c 83       	std	Y+4, r24	; 0x04
		TOGGLE(PORTA.OUT, GREEN_LED);
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	85 25       	eor	r24, r5
     57c:	8c 83       	std	Y+4, r24	; 0x04
		TOGGLE(PORTA.OUT, BLUE_LED);
     57e:	8c 81       	ldd	r24, Y+4	; 0x04
     580:	84 25       	eor	r24, r4
     582:	8c 83       	std	Y+4, r24	; 0x04
		delay_ms(globalDelay);
     584:	f0 91 09 20 	lds	r31, 0x2009
     588:	a0 91 08 20 	lds	r26, 0x2008
     58c:	ef 2f       	mov	r30, r31
     58e:	ee 0f       	add	r30, r30
     590:	ee 0b       	sbc	r30, r30
     592:	2a 2f       	mov	r18, r26
     594:	3f 2f       	mov	r19, r31
     596:	4e 2f       	mov	r20, r30
     598:	5e 2f       	mov	r21, r30
     59a:	6e 2f       	mov	r22, r30
     59c:	7e 2f       	mov	r23, r30
     59e:	8e 2f       	mov	r24, r30
     5a0:	9e 2f       	mov	r25, r30
     5a2:	05 e0       	ldi	r16, 0x05	; 5
     5a4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__ashldi3>
     5a8:	aa 2e       	mov	r10, r26
     5aa:	bf 2e       	mov	r11, r31
     5ac:	ce 2e       	mov	r12, r30
     5ae:	de 2e       	mov	r13, r30
     5b0:	ee 2e       	mov	r14, r30
     5b2:	fe 2e       	mov	r15, r30
     5b4:	0e 2f       	mov	r16, r30
     5b6:	1e 2f       	mov	r17, r30
     5b8:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__subdi3>
     5bc:	a2 2e       	mov	r10, r18
     5be:	b3 2e       	mov	r11, r19
     5c0:	c4 2e       	mov	r12, r20
     5c2:	d5 2e       	mov	r13, r21
     5c4:	e6 2e       	mov	r14, r22
     5c6:	f7 2e       	mov	r15, r23
     5c8:	b8 2f       	mov	r27, r24
     5ca:	19 2f       	mov	r17, r25
     5cc:	06 e0       	ldi	r16, 0x06	; 6
     5ce:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__ashldi3>
     5d2:	0b 2f       	mov	r16, r27
     5d4:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__subdi3>
     5d8:	03 e0       	ldi	r16, 0x03	; 3
     5da:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__ashldi3>
     5de:	aa 2e       	mov	r10, r26
     5e0:	bf 2e       	mov	r11, r31
     5e2:	ce 2e       	mov	r12, r30
     5e4:	de 2e       	mov	r13, r30
     5e6:	ee 2e       	mov	r14, r30
     5e8:	fe 2e       	mov	r15, r30
     5ea:	0e 2f       	mov	r16, r30
     5ec:	1e 2f       	mov	r17, r30
     5ee:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__adddi3>
     5f2:	07 e0       	ldi	r16, 0x07	; 7
     5f4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__ashldi3>
     5f8:	29 51       	subi	r18, 0x19	; 25
     5fa:	3c 4f       	sbci	r19, 0xFC	; 252
     5fc:	4f 4f       	sbci	r20, 0xFF	; 255
     5fe:	5f 4f       	sbci	r21, 0xFF	; 255
     600:	6f 4f       	sbci	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	8f 4f       	sbci	r24, 0xFF	; 255
     606:	9f 4f       	sbci	r25, 0xFF	; 255
     608:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatundisf>
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e8       	ldi	r19, 0x80	; 128
     610:	4b eb       	ldi	r20, 0xBB	; 187
     612:	55 e4       	ldi	r21, 0x45	; 69
     614:	75 d7       	rcall	.+3818   	; 0x1500 <__divsf3>
     616:	e1 d7       	rcall	.+4034   	; 0x15da <__fixunssfdi>
     618:	f2 2f       	mov	r31, r18
     61a:	e3 2f       	mov	r30, r19
     61c:	8f 2f       	mov	r24, r31
     61e:	9e 2f       	mov	r25, r30
     620:	a4 2f       	mov	r26, r20
     622:	b5 2f       	mov	r27, r21
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	a1 09       	sbc	r26, r1
     628:	b1 09       	sbc	r27, r1
     62a:	00 97       	sbiw	r24, 0x00	; 0
     62c:	a1 05       	cpc	r26, r1
     62e:	b1 05       	cpc	r27, r1
     630:	c9 f7       	brne	.-14     	; 0x624 <gameOver+0x1ce>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	88 1a       	sub	r8, r24
     636:	91 08       	sbc	r9, r1
void gameOver(void)
{
	int i = 0;
	globalDelay = INIT_DELAY;
	
	for(i = 0; i < 4; i++)
     638:	81 14       	cp	r8, r1
     63a:	91 04       	cpc	r9, r1
     63c:	09 f0       	breq	.+2      	; 0x640 <gameOver+0x1ea>
     63e:	32 cf       	rjmp	.-412    	; 0x4a4 <gameOver+0x4e>
		TOGGLE(PORTA.OUT, GREEN_LED);
		TOGGLE(PORTA.OUT, BLUE_LED);
		delay_ms(globalDelay);
	}
	
	if(count >= highScore)
     640:	80 91 aa 21 	lds	r24, 0x21AA
     644:	90 91 ab 21 	lds	r25, 0x21AB
     648:	20 91 0c 20 	lds	r18, 0x200C
     64c:	30 91 0d 20 	lds	r19, 0x200D
     650:	82 17       	cp	r24, r18
     652:	93 07       	cpc	r25, r19
     654:	24 f0       	brlt	.+8      	; 0x65e <gameOver+0x208>
	{
		highScore = count;
     656:	80 93 0c 20 	sts	0x200C, r24
     65a:	90 93 0d 20 	sts	0x200D, r25
	}
	
	eeprom_write_byte(0, highScore);
     65e:	60 91 0c 20 	lds	r22, 0x200C
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__eewr_byte_x256a3bu>
	
	menuMode = 1;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	80 93 04 20 	sts	0x2004, r24
     672:	90 93 05 20 	sts	0x2005, r25
	
	return;
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	df 90       	pop	r13
     684:	cf 90       	pop	r12
     686:	bf 90       	pop	r11
     688:	af 90       	pop	r10
     68a:	9f 90       	pop	r9
     68c:	8f 90       	pop	r8
     68e:	7f 90       	pop	r7
     690:	6f 90       	pop	r6
     692:	5f 90       	pop	r5
     694:	4f 90       	pop	r4
     696:	08 95       	ret

00000698 <init>:

// Initializes the game, namely the interrupts required for the button inputs to be received.
void init(void)
{
		// Initializes the board target resources
		board_init();
     698:	0b de       	rcall	.-1002   	; 0x2b0 <board_init>
		
		// System clock initialization
		sysclk_init();
     69a:	d2 dd       	rcall	.-1116   	; 0x240 <sysclk_init>
		
		// Initializes the delay driver
		delay_init(sysclk_get_cpu_hz());
		
		// Read the high score stored in the EEPROM
		highScore = eeprom_read_byte(0);
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 43 0c 	call	0x1886	; 0x1886 <__eerd_byte_x256a3bu>
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	80 93 0c 20 	sts	0x200C, r24
     6aa:	90 93 0d 20 	sts	0x200D, r25
		
		// Disables all interrupts
		cli();
     6ae:	f8 94       	cli
		
		// Set PORTC / PORTD for input
		CBI(PORTC.DIR, 1);
     6b0:	a0 e4       	ldi	r26, 0x40	; 64
     6b2:	b6 e0       	ldi	r27, 0x06	; 6
     6b4:	8c 91       	ld	r24, X
     6b6:	8d 7f       	andi	r24, 0xFD	; 253
     6b8:	8c 93       	st	X, r24
		CBI(PORTD.DIR, 1);
     6ba:	e0 e6       	ldi	r30, 0x60	; 96
     6bc:	f6 e0       	ldi	r31, 0x06	; 6
     6be:	80 81       	ld	r24, Z
     6c0:	8d 7f       	andi	r24, 0xFD	; 253
     6c2:	80 83       	st	Z, r24
		
		// Set PORTC / PORTD to Interrupt Mode
		SBI(PORTC.INT0MASK, 1);
     6c4:	1a 96       	adiw	r26, 0x0a	; 10
     6c6:	8c 91       	ld	r24, X
     6c8:	1a 97       	sbiw	r26, 0x0a	; 10
     6ca:	82 60       	ori	r24, 0x02	; 2
     6cc:	1a 96       	adiw	r26, 0x0a	; 10
     6ce:	8c 93       	st	X, r24
     6d0:	1a 97       	sbiw	r26, 0x0a	; 10
		SBI(PORTC.INT1MASK, 2);
     6d2:	1b 96       	adiw	r26, 0x0b	; 11
     6d4:	8c 91       	ld	r24, X
     6d6:	1b 97       	sbiw	r26, 0x0b	; 11
     6d8:	84 60       	ori	r24, 0x04	; 4
     6da:	1b 96       	adiw	r26, 0x0b	; 11
     6dc:	8c 93       	st	X, r24
     6de:	1b 97       	sbiw	r26, 0x0b	; 11
		SBI(PORTD.INT0MASK, 0);
     6e0:	82 85       	ldd	r24, Z+10	; 0x0a
     6e2:	81 60       	ori	r24, 0x01	; 1
     6e4:	82 87       	std	Z+10, r24	; 0x0a
		SBI(PORTD.INT1MASK, 1);
     6e6:	83 85       	ldd	r24, Z+11	; 0x0b
     6e8:	82 60       	ori	r24, 0x02	; 2
     6ea:	83 87       	std	Z+11, r24	; 0x0b
		
		// Set information for the interrupt pins on PORTC / PORTD
		PORTC.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc | PORT_ISC_FALLING_gc;
     6ec:	8a e3       	ldi	r24, 0x3A	; 58
     6ee:	51 96       	adiw	r26, 0x11	; 17
     6f0:	8c 93       	st	X, r24
     6f2:	51 97       	sbiw	r26, 0x11	; 17
		PORTC.PIN2CTRL = PORT_OPC_WIREDANDPULL_gc | PORT_ISC_FALLING_gc;
     6f4:	52 96       	adiw	r26, 0x12	; 18
     6f6:	8c 93       	st	X, r24
     6f8:	52 97       	sbiw	r26, 0x12	; 18
		PORTD.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc | PORT_ISC_FALLING_gc;
     6fa:	80 8b       	std	Z+16, r24	; 0x10
		PORTD.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc | PORT_ISC_FALLING_gc;
     6fc:	81 8b       	std	Z+17, r24	; 0x11
		
		// Set PORTC / PORTD and its INT0MASK for LO level priority
		PORTC.INTCTRL = PORT_INT0LVL_LO_gc | PORT_INT1LVL_LO_gc;
     6fe:	85 e0       	ldi	r24, 0x05	; 5
     700:	19 96       	adiw	r26, 0x09	; 9
     702:	8c 93       	st	X, r24
		PORTD.INTCTRL = PORT_INT0LVL_LO_gc | PORT_INT1LVL_LO_gc;
     704:	81 87       	std	Z+9, r24	; 0x09
		
		// Set Interrupt Priority Level Configuration
		PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     706:	e0 ea       	ldi	r30, 0xA0	; 160
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	82 81       	ldd	r24, Z+2	; 0x02
     70c:	87 60       	ori	r24, 0x07	; 7
     70e:	82 83       	std	Z+2, r24	; 0x02
		
		// Enable data outputs for PORTA, where the light outputs are plugged
		PORTA.DIRSET = 0xFF;
     710:	e0 e0       	ldi	r30, 0x00	; 0
     712:	f6 e0       	ldi	r31, 0x06	; 6
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	81 83       	std	Z+1, r24	; 0x01
		
		// Turns off initial zombie RED LED
		CBI(PORTA.OUTCLR, 0);
     718:	86 81       	ldd	r24, Z+6	; 0x06
     71a:	8e 7f       	andi	r24, 0xFE	; 254
     71c:	86 83       	std	Z+6, r24	; 0x06
     71e:	08 95       	ret

00000720 <toggleLight>:

// This function takes an LED input from the enum, and determines which pin to energize, and does so within the switch function.
// Pins are able to be switched, if after setup, they are hooked to different pins. Uses the bit-shift toggle macro defined in the
// definitions section at the top of the code.
void toggleLight(LED_t outputButton)
{
     720:	af 92       	push	r10
     722:	bf 92       	push	r11
     724:	cf 92       	push	r12
     726:	df 92       	push	r13
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
	switch(outputButton)
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	09 f4       	brne	.+2      	; 0x736 <toggleLight+0x16>
     734:	67 c0       	rjmp	.+206    	; 0x804 <toggleLight+0xe4>
     736:	08 f4       	brcc	.+2      	; 0x73a <toggleLight+0x1a>
     738:	c1 c0       	rjmp	.+386    	; 0x8bc <toggleLight+0x19c>
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	21 f0       	breq	.+8      	; 0x746 <toggleLight+0x26>
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	09 f4       	brne	.+2      	; 0x744 <toggleLight+0x24>
     742:	18 c1       	rjmp	.+560    	; 0x974 <toggleLight+0x254>
     744:	72 c1       	rjmp	.+740    	; 0xa2a <toggleLight+0x30a>
	{
		case WHITE_LED:
			TOGGLE(PORTA.OUT, WHITE_LED);
     746:	e0 e0       	ldi	r30, 0x00	; 0
     748:	f6 e0       	ldi	r31, 0x06	; 6
     74a:	94 81       	ldd	r25, Z+4	; 0x04
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	89 27       	eor	r24, r25
     750:	84 83       	std	Z+4, r24	; 0x04
			delay_ms(globalDelay);
     752:	f0 91 09 20 	lds	r31, 0x2009
     756:	a0 91 08 20 	lds	r26, 0x2008
     75a:	ef 2f       	mov	r30, r31
     75c:	ee 0f       	add	r30, r30
     75e:	ee 0b       	sbc	r30, r30
     760:	2a 2f       	mov	r18, r26
     762:	3f 2f       	mov	r19, r31
     764:	4e 2f       	mov	r20, r30
     766:	5e 2f       	mov	r21, r30
     768:	6e 2f       	mov	r22, r30
     76a:	7e 2f       	mov	r23, r30
     76c:	8e 2f       	mov	r24, r30
     76e:	9e 2f       	mov	r25, r30
     770:	05 e0       	ldi	r16, 0x05	; 5
     772:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__ashldi3>
     776:	aa 2e       	mov	r10, r26
     778:	bf 2e       	mov	r11, r31
     77a:	ce 2e       	mov	r12, r30
     77c:	de 2e       	mov	r13, r30
     77e:	ee 2e       	mov	r14, r30
     780:	fe 2e       	mov	r15, r30
     782:	0e 2f       	mov	r16, r30
     784:	1e 2f       	mov	r17, r30
     786:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__subdi3>
     78a:	a2 2e       	mov	r10, r18
     78c:	b3 2e       	mov	r11, r19
     78e:	c4 2e       	mov	r12, r20
     790:	d5 2e       	mov	r13, r21
     792:	e6 2e       	mov	r14, r22
     794:	f7 2e       	mov	r15, r23
     796:	b8 2f       	mov	r27, r24
     798:	19 2f       	mov	r17, r25
     79a:	06 e0       	ldi	r16, 0x06	; 6
     79c:	f2 d7       	rcall	.+4068   	; 0x1782 <__ashldi3>
     79e:	0b 2f       	mov	r16, r27
     7a0:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__subdi3>
     7a4:	03 e0       	ldi	r16, 0x03	; 3
     7a6:	ed d7       	rcall	.+4058   	; 0x1782 <__ashldi3>
     7a8:	aa 2e       	mov	r10, r26
     7aa:	bf 2e       	mov	r11, r31
     7ac:	ce 2e       	mov	r12, r30
     7ae:	de 2e       	mov	r13, r30
     7b0:	ee 2e       	mov	r14, r30
     7b2:	fe 2e       	mov	r15, r30
     7b4:	0e 2f       	mov	r16, r30
     7b6:	1e 2f       	mov	r17, r30
     7b8:	fd d7       	rcall	.+4090   	; 0x17b4 <__adddi3>
     7ba:	07 e0       	ldi	r16, 0x07	; 7
     7bc:	e2 d7       	rcall	.+4036   	; 0x1782 <__ashldi3>
     7be:	29 51       	subi	r18, 0x19	; 25
     7c0:	3c 4f       	sbci	r19, 0xFC	; 252
     7c2:	4f 4f       	sbci	r20, 0xFF	; 255
     7c4:	5f 4f       	sbci	r21, 0xFF	; 255
     7c6:	6f 4f       	sbci	r22, 0xFF	; 255
     7c8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ca:	8f 4f       	sbci	r24, 0xFF	; 255
     7cc:	9f 4f       	sbci	r25, 0xFF	; 255
     7ce:	3a d7       	rcall	.+3700   	; 0x1644 <__floatundisf>
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e8       	ldi	r19, 0x80	; 128
     7d4:	4b eb       	ldi	r20, 0xBB	; 187
     7d6:	55 e4       	ldi	r21, 0x45	; 69
     7d8:	93 d6       	rcall	.+3366   	; 0x1500 <__divsf3>
     7da:	ff d6       	rcall	.+3582   	; 0x15da <__fixunssfdi>
     7dc:	f2 2f       	mov	r31, r18
     7de:	e3 2f       	mov	r30, r19
     7e0:	8f 2f       	mov	r24, r31
     7e2:	9e 2f       	mov	r25, r30
     7e4:	a4 2f       	mov	r26, r20
     7e6:	b5 2f       	mov	r27, r21
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	a1 09       	sbc	r26, r1
     7ec:	b1 09       	sbc	r27, r1
     7ee:	00 97       	sbiw	r24, 0x00	; 0
     7f0:	a1 05       	cpc	r26, r1
     7f2:	b1 05       	cpc	r27, r1
     7f4:	c9 f7       	brne	.-14     	; 0x7e8 <toggleLight+0xc8>
			TOGGLE(PORTA.OUT, WHITE_LED);
     7f6:	e0 e0       	ldi	r30, 0x00	; 0
     7f8:	f6 e0       	ldi	r31, 0x06	; 6
     7fa:	94 81       	ldd	r25, Z+4	; 0x04
     7fc:	84 e0       	ldi	r24, 0x04	; 4
     7fe:	89 27       	eor	r24, r25
     800:	84 83       	std	Z+4, r24	; 0x04
			break;
     802:	13 c1       	rjmp	.+550    	; 0xa2a <toggleLight+0x30a>
		case BLUE_LED:
			TOGGLE(PORTA.OUT, BLUE_LED);
     804:	e0 e0       	ldi	r30, 0x00	; 0
     806:	f6 e0       	ldi	r31, 0x06	; 6
     808:	94 81       	ldd	r25, Z+4	; 0x04
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	89 27       	eor	r24, r25
     80e:	84 83       	std	Z+4, r24	; 0x04
			delay_ms(globalDelay);
     810:	f0 91 09 20 	lds	r31, 0x2009
     814:	a0 91 08 20 	lds	r26, 0x2008
     818:	ef 2f       	mov	r30, r31
     81a:	ee 0f       	add	r30, r30
     81c:	ee 0b       	sbc	r30, r30
     81e:	2a 2f       	mov	r18, r26
     820:	3f 2f       	mov	r19, r31
     822:	4e 2f       	mov	r20, r30
     824:	5e 2f       	mov	r21, r30
     826:	6e 2f       	mov	r22, r30
     828:	7e 2f       	mov	r23, r30
     82a:	8e 2f       	mov	r24, r30
     82c:	9e 2f       	mov	r25, r30
     82e:	05 e0       	ldi	r16, 0x05	; 5
     830:	a8 d7       	rcall	.+3920   	; 0x1782 <__ashldi3>
     832:	aa 2e       	mov	r10, r26
     834:	bf 2e       	mov	r11, r31
     836:	ce 2e       	mov	r12, r30
     838:	de 2e       	mov	r13, r30
     83a:	ee 2e       	mov	r14, r30
     83c:	fe 2e       	mov	r15, r30
     83e:	0e 2f       	mov	r16, r30
     840:	1e 2f       	mov	r17, r30
     842:	c1 d7       	rcall	.+3970   	; 0x17c6 <__subdi3>
     844:	a2 2e       	mov	r10, r18
     846:	b3 2e       	mov	r11, r19
     848:	c4 2e       	mov	r12, r20
     84a:	d5 2e       	mov	r13, r21
     84c:	e6 2e       	mov	r14, r22
     84e:	f7 2e       	mov	r15, r23
     850:	b8 2f       	mov	r27, r24
     852:	19 2f       	mov	r17, r25
     854:	06 e0       	ldi	r16, 0x06	; 6
     856:	95 d7       	rcall	.+3882   	; 0x1782 <__ashldi3>
     858:	0b 2f       	mov	r16, r27
     85a:	b5 d7       	rcall	.+3946   	; 0x17c6 <__subdi3>
     85c:	03 e0       	ldi	r16, 0x03	; 3
     85e:	91 d7       	rcall	.+3874   	; 0x1782 <__ashldi3>
     860:	aa 2e       	mov	r10, r26
     862:	bf 2e       	mov	r11, r31
     864:	ce 2e       	mov	r12, r30
     866:	de 2e       	mov	r13, r30
     868:	ee 2e       	mov	r14, r30
     86a:	fe 2e       	mov	r15, r30
     86c:	0e 2f       	mov	r16, r30
     86e:	1e 2f       	mov	r17, r30
     870:	a1 d7       	rcall	.+3906   	; 0x17b4 <__adddi3>
     872:	07 e0       	ldi	r16, 0x07	; 7
     874:	86 d7       	rcall	.+3852   	; 0x1782 <__ashldi3>
     876:	29 51       	subi	r18, 0x19	; 25
     878:	3c 4f       	sbci	r19, 0xFC	; 252
     87a:	4f 4f       	sbci	r20, 0xFF	; 255
     87c:	5f 4f       	sbci	r21, 0xFF	; 255
     87e:	6f 4f       	sbci	r22, 0xFF	; 255
     880:	7f 4f       	sbci	r23, 0xFF	; 255
     882:	8f 4f       	sbci	r24, 0xFF	; 255
     884:	9f 4f       	sbci	r25, 0xFF	; 255
     886:	de d6       	rcall	.+3516   	; 0x1644 <__floatundisf>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e8       	ldi	r19, 0x80	; 128
     88c:	4b eb       	ldi	r20, 0xBB	; 187
     88e:	55 e4       	ldi	r21, 0x45	; 69
     890:	37 d6       	rcall	.+3182   	; 0x1500 <__divsf3>
     892:	a3 d6       	rcall	.+3398   	; 0x15da <__fixunssfdi>
     894:	f2 2f       	mov	r31, r18
     896:	e3 2f       	mov	r30, r19
     898:	8f 2f       	mov	r24, r31
     89a:	9e 2f       	mov	r25, r30
     89c:	a4 2f       	mov	r26, r20
     89e:	b5 2f       	mov	r27, r21
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	a1 09       	sbc	r26, r1
     8a4:	b1 09       	sbc	r27, r1
     8a6:	00 97       	sbiw	r24, 0x00	; 0
     8a8:	a1 05       	cpc	r26, r1
     8aa:	b1 05       	cpc	r27, r1
     8ac:	c9 f7       	brne	.-14     	; 0x8a0 <toggleLight+0x180>
			TOGGLE(PORTA.OUT, BLUE_LED);
     8ae:	e0 e0       	ldi	r30, 0x00	; 0
     8b0:	f6 e0       	ldi	r31, 0x06	; 6
     8b2:	94 81       	ldd	r25, Z+4	; 0x04
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	89 27       	eor	r24, r25
     8b8:	84 83       	std	Z+4, r24	; 0x04
			break;
     8ba:	b7 c0       	rjmp	.+366    	; 0xa2a <toggleLight+0x30a>
		case GREEN_LED:
			TOGGLE(PORTA.OUT, GREEN_LED);
     8bc:	e0 e0       	ldi	r30, 0x00	; 0
     8be:	f6 e0       	ldi	r31, 0x06	; 6
     8c0:	94 81       	ldd	r25, Z+4	; 0x04
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	89 27       	eor	r24, r25
     8c6:	84 83       	std	Z+4, r24	; 0x04
			delay_ms(globalDelay);
     8c8:	f0 91 09 20 	lds	r31, 0x2009
     8cc:	a0 91 08 20 	lds	r26, 0x2008
     8d0:	ef 2f       	mov	r30, r31
     8d2:	ee 0f       	add	r30, r30
     8d4:	ee 0b       	sbc	r30, r30
     8d6:	2a 2f       	mov	r18, r26
     8d8:	3f 2f       	mov	r19, r31
     8da:	4e 2f       	mov	r20, r30
     8dc:	5e 2f       	mov	r21, r30
     8de:	6e 2f       	mov	r22, r30
     8e0:	7e 2f       	mov	r23, r30
     8e2:	8e 2f       	mov	r24, r30
     8e4:	9e 2f       	mov	r25, r30
     8e6:	05 e0       	ldi	r16, 0x05	; 5
     8e8:	4c d7       	rcall	.+3736   	; 0x1782 <__ashldi3>
     8ea:	aa 2e       	mov	r10, r26
     8ec:	bf 2e       	mov	r11, r31
     8ee:	ce 2e       	mov	r12, r30
     8f0:	de 2e       	mov	r13, r30
     8f2:	ee 2e       	mov	r14, r30
     8f4:	fe 2e       	mov	r15, r30
     8f6:	0e 2f       	mov	r16, r30
     8f8:	1e 2f       	mov	r17, r30
     8fa:	65 d7       	rcall	.+3786   	; 0x17c6 <__subdi3>
     8fc:	a2 2e       	mov	r10, r18
     8fe:	b3 2e       	mov	r11, r19
     900:	c4 2e       	mov	r12, r20
     902:	d5 2e       	mov	r13, r21
     904:	e6 2e       	mov	r14, r22
     906:	f7 2e       	mov	r15, r23
     908:	b8 2f       	mov	r27, r24
     90a:	19 2f       	mov	r17, r25
     90c:	06 e0       	ldi	r16, 0x06	; 6
     90e:	39 d7       	rcall	.+3698   	; 0x1782 <__ashldi3>
     910:	0b 2f       	mov	r16, r27
     912:	59 d7       	rcall	.+3762   	; 0x17c6 <__subdi3>
     914:	03 e0       	ldi	r16, 0x03	; 3
     916:	35 d7       	rcall	.+3690   	; 0x1782 <__ashldi3>
     918:	aa 2e       	mov	r10, r26
     91a:	bf 2e       	mov	r11, r31
     91c:	ce 2e       	mov	r12, r30
     91e:	de 2e       	mov	r13, r30
     920:	ee 2e       	mov	r14, r30
     922:	fe 2e       	mov	r15, r30
     924:	0e 2f       	mov	r16, r30
     926:	1e 2f       	mov	r17, r30
     928:	45 d7       	rcall	.+3722   	; 0x17b4 <__adddi3>
     92a:	07 e0       	ldi	r16, 0x07	; 7
     92c:	2a d7       	rcall	.+3668   	; 0x1782 <__ashldi3>
     92e:	29 51       	subi	r18, 0x19	; 25
     930:	3c 4f       	sbci	r19, 0xFC	; 252
     932:	4f 4f       	sbci	r20, 0xFF	; 255
     934:	5f 4f       	sbci	r21, 0xFF	; 255
     936:	6f 4f       	sbci	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	8f 4f       	sbci	r24, 0xFF	; 255
     93c:	9f 4f       	sbci	r25, 0xFF	; 255
     93e:	82 d6       	rcall	.+3332   	; 0x1644 <__floatundisf>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e8       	ldi	r19, 0x80	; 128
     944:	4b eb       	ldi	r20, 0xBB	; 187
     946:	55 e4       	ldi	r21, 0x45	; 69
     948:	db d5       	rcall	.+2998   	; 0x1500 <__divsf3>
     94a:	47 d6       	rcall	.+3214   	; 0x15da <__fixunssfdi>
     94c:	f2 2f       	mov	r31, r18
     94e:	e3 2f       	mov	r30, r19
     950:	8f 2f       	mov	r24, r31
     952:	9e 2f       	mov	r25, r30
     954:	a4 2f       	mov	r26, r20
     956:	b5 2f       	mov	r27, r21
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	a1 09       	sbc	r26, r1
     95c:	b1 09       	sbc	r27, r1
     95e:	00 97       	sbiw	r24, 0x00	; 0
     960:	a1 05       	cpc	r26, r1
     962:	b1 05       	cpc	r27, r1
     964:	c9 f7       	brne	.-14     	; 0x958 <toggleLight+0x238>
			TOGGLE(PORTA.OUT, GREEN_LED);
     966:	e0 e0       	ldi	r30, 0x00	; 0
     968:	f6 e0       	ldi	r31, 0x06	; 6
     96a:	94 81       	ldd	r25, Z+4	; 0x04
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	89 27       	eor	r24, r25
     970:	84 83       	std	Z+4, r24	; 0x04
			break;
     972:	5b c0       	rjmp	.+182    	; 0xa2a <toggleLight+0x30a>
		case RED_LED:
			TOGGLE(PORTA.OUT, RED_LED);
     974:	e0 e0       	ldi	r30, 0x00	; 0
     976:	f6 e0       	ldi	r31, 0x06	; 6
     978:	94 81       	ldd	r25, Z+4	; 0x04
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	89 27       	eor	r24, r25
     97e:	84 83       	std	Z+4, r24	; 0x04
			delay_ms(globalDelay);
     980:	f0 91 09 20 	lds	r31, 0x2009
     984:	a0 91 08 20 	lds	r26, 0x2008
     988:	ef 2f       	mov	r30, r31
     98a:	ee 0f       	add	r30, r30
     98c:	ee 0b       	sbc	r30, r30
     98e:	2a 2f       	mov	r18, r26
     990:	3f 2f       	mov	r19, r31
     992:	4e 2f       	mov	r20, r30
     994:	5e 2f       	mov	r21, r30
     996:	6e 2f       	mov	r22, r30
     998:	7e 2f       	mov	r23, r30
     99a:	8e 2f       	mov	r24, r30
     99c:	9e 2f       	mov	r25, r30
     99e:	05 e0       	ldi	r16, 0x05	; 5
     9a0:	f0 d6       	rcall	.+3552   	; 0x1782 <__ashldi3>
     9a2:	aa 2e       	mov	r10, r26
     9a4:	bf 2e       	mov	r11, r31
     9a6:	ce 2e       	mov	r12, r30
     9a8:	de 2e       	mov	r13, r30
     9aa:	ee 2e       	mov	r14, r30
     9ac:	fe 2e       	mov	r15, r30
     9ae:	0e 2f       	mov	r16, r30
     9b0:	1e 2f       	mov	r17, r30
     9b2:	09 d7       	rcall	.+3602   	; 0x17c6 <__subdi3>
     9b4:	a2 2e       	mov	r10, r18
     9b6:	b3 2e       	mov	r11, r19
     9b8:	c4 2e       	mov	r12, r20
     9ba:	d5 2e       	mov	r13, r21
     9bc:	e6 2e       	mov	r14, r22
     9be:	f7 2e       	mov	r15, r23
     9c0:	b8 2f       	mov	r27, r24
     9c2:	19 2f       	mov	r17, r25
     9c4:	06 e0       	ldi	r16, 0x06	; 6
     9c6:	dd d6       	rcall	.+3514   	; 0x1782 <__ashldi3>
     9c8:	0b 2f       	mov	r16, r27
     9ca:	fd d6       	rcall	.+3578   	; 0x17c6 <__subdi3>
     9cc:	03 e0       	ldi	r16, 0x03	; 3
     9ce:	d9 d6       	rcall	.+3506   	; 0x1782 <__ashldi3>
     9d0:	aa 2e       	mov	r10, r26
     9d2:	bf 2e       	mov	r11, r31
     9d4:	ce 2e       	mov	r12, r30
     9d6:	de 2e       	mov	r13, r30
     9d8:	ee 2e       	mov	r14, r30
     9da:	fe 2e       	mov	r15, r30
     9dc:	0e 2f       	mov	r16, r30
     9de:	1e 2f       	mov	r17, r30
     9e0:	e9 d6       	rcall	.+3538   	; 0x17b4 <__adddi3>
     9e2:	07 e0       	ldi	r16, 0x07	; 7
     9e4:	ce d6       	rcall	.+3484   	; 0x1782 <__ashldi3>
     9e6:	29 51       	subi	r18, 0x19	; 25
     9e8:	3c 4f       	sbci	r19, 0xFC	; 252
     9ea:	4f 4f       	sbci	r20, 0xFF	; 255
     9ec:	5f 4f       	sbci	r21, 0xFF	; 255
     9ee:	6f 4f       	sbci	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	8f 4f       	sbci	r24, 0xFF	; 255
     9f4:	9f 4f       	sbci	r25, 0xFF	; 255
     9f6:	26 d6       	rcall	.+3148   	; 0x1644 <__floatundisf>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e8       	ldi	r19, 0x80	; 128
     9fc:	4b eb       	ldi	r20, 0xBB	; 187
     9fe:	55 e4       	ldi	r21, 0x45	; 69
     a00:	7f d5       	rcall	.+2814   	; 0x1500 <__divsf3>
     a02:	eb d5       	rcall	.+3030   	; 0x15da <__fixunssfdi>
     a04:	f2 2f       	mov	r31, r18
     a06:	e3 2f       	mov	r30, r19
     a08:	8f 2f       	mov	r24, r31
     a0a:	9e 2f       	mov	r25, r30
     a0c:	a4 2f       	mov	r26, r20
     a0e:	b5 2f       	mov	r27, r21
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	a1 09       	sbc	r26, r1
     a14:	b1 09       	sbc	r27, r1
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	a1 05       	cpc	r26, r1
     a1a:	b1 05       	cpc	r27, r1
     a1c:	c9 f7       	brne	.-14     	; 0xa10 <toggleLight+0x2f0>
			TOGGLE(PORTA.OUT, RED_LED);
     a1e:	e0 e0       	ldi	r30, 0x00	; 0
     a20:	f6 e0       	ldi	r31, 0x06	; 6
     a22:	94 81       	ldd	r25, Z+4	; 0x04
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	89 27       	eor	r24, r25
     a28:	84 83       	std	Z+4, r24	; 0x04
			break;
		default:
			break;
	}
}
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	af 90       	pop	r10
     a3a:	08 95       	ret

00000a3c <displaySequence>:
	return;
}

// Loops through the memory sequence array and displays the sequence
void displaySequence(void)
{
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
	int i;
	
	for(i = 0; i < count; i++)
     a54:	80 91 aa 21 	lds	r24, 0x21AA
     a58:	90 91 ab 21 	lds	r25, 0x21AB
     a5c:	18 16       	cp	r1, r24
     a5e:	19 06       	cpc	r1, r25
     a60:	0c f0       	brlt	.+2      	; 0xa64 <displaySequence+0x28>
     a62:	7c c0       	rjmp	.+248    	; 0xb5c <displaySequence+0x120>
     a64:	0f 2e       	mov	r0, r31
     a66:	f6 e1       	ldi	r31, 0x16	; 22
     a68:	8f 2e       	mov	r8, r31
     a6a:	f0 e2       	ldi	r31, 0x20	; 32
     a6c:	9f 2e       	mov	r9, r31
     a6e:	f0 2d       	mov	r31, r0
     a70:	c0 e0       	ldi	r28, 0x00	; 0
     a72:	d0 e0       	ldi	r29, 0x00	; 0
	{
		switch(memorySequence[i])
     a74:	f4 01       	movw	r30, r8
     a76:	81 91       	ld	r24, Z+
     a78:	91 91       	ld	r25, Z+
     a7a:	4f 01       	movw	r8, r30
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	91 05       	cpc	r25, r1
     a80:	99 f0       	breq	.+38     	; 0xaa8 <displaySequence+0x6c>
     a82:	1c f4       	brge	.+6      	; 0xa8a <displaySequence+0x4e>
     a84:	89 2b       	or	r24, r25
     a86:	69 f0       	breq	.+26     	; 0xaa2 <displaySequence+0x66>
     a88:	11 c0       	rjmp	.+34     	; 0xaac <displaySequence+0x70>
     a8a:	82 30       	cpi	r24, 0x02	; 2
     a8c:	91 05       	cpc	r25, r1
     a8e:	19 f0       	breq	.+6      	; 0xa96 <displaySequence+0x5a>
     a90:	03 97       	sbiw	r24, 0x03	; 3
     a92:	21 f0       	breq	.+8      	; 0xa9c <displaySequence+0x60>
     a94:	0b c0       	rjmp	.+22     	; 0xaac <displaySequence+0x70>
		{
			case WHITE_LED:
				toggleLight(WHITE_LED);
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	43 de       	rcall	.-890    	; 0x720 <toggleLight>
				break;
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <displaySequence+0x70>
			case RED_LED:
				toggleLight(RED_LED);
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	40 de       	rcall	.-896    	; 0x720 <toggleLight>
				break;
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <displaySequence+0x70>
			case GREEN_LED:
				toggleLight(GREEN_LED);
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	3d de       	rcall	.-902    	; 0x720 <toggleLight>
				break;
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <displaySequence+0x70>
			case BLUE_LED:
				toggleLight(BLUE_LED);
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	3a de       	rcall	.-908    	; 0x720 <toggleLight>
				break;
			default:
				break;
		}
		
		delay_ms(globalDelay);
     aac:	f0 91 09 20 	lds	r31, 0x2009
     ab0:	a0 91 08 20 	lds	r26, 0x2008
     ab4:	ef 2f       	mov	r30, r31
     ab6:	ee 0f       	add	r30, r30
     ab8:	ee 0b       	sbc	r30, r30
     aba:	2a 2f       	mov	r18, r26
     abc:	3f 2f       	mov	r19, r31
     abe:	4e 2f       	mov	r20, r30
     ac0:	5e 2f       	mov	r21, r30
     ac2:	6e 2f       	mov	r22, r30
     ac4:	7e 2f       	mov	r23, r30
     ac6:	8e 2f       	mov	r24, r30
     ac8:	9e 2f       	mov	r25, r30
     aca:	05 e0       	ldi	r16, 0x05	; 5
     acc:	5a d6       	rcall	.+3252   	; 0x1782 <__ashldi3>
     ace:	aa 2e       	mov	r10, r26
     ad0:	bf 2e       	mov	r11, r31
     ad2:	ce 2e       	mov	r12, r30
     ad4:	de 2e       	mov	r13, r30
     ad6:	ee 2e       	mov	r14, r30
     ad8:	fe 2e       	mov	r15, r30
     ada:	0e 2f       	mov	r16, r30
     adc:	1e 2f       	mov	r17, r30
     ade:	73 d6       	rcall	.+3302   	; 0x17c6 <__subdi3>
     ae0:	a2 2e       	mov	r10, r18
     ae2:	b3 2e       	mov	r11, r19
     ae4:	c4 2e       	mov	r12, r20
     ae6:	d5 2e       	mov	r13, r21
     ae8:	e6 2e       	mov	r14, r22
     aea:	f7 2e       	mov	r15, r23
     aec:	b8 2f       	mov	r27, r24
     aee:	19 2f       	mov	r17, r25
     af0:	06 e0       	ldi	r16, 0x06	; 6
     af2:	47 d6       	rcall	.+3214   	; 0x1782 <__ashldi3>
     af4:	0b 2f       	mov	r16, r27
     af6:	67 d6       	rcall	.+3278   	; 0x17c6 <__subdi3>
     af8:	03 e0       	ldi	r16, 0x03	; 3
     afa:	43 d6       	rcall	.+3206   	; 0x1782 <__ashldi3>
     afc:	aa 2e       	mov	r10, r26
     afe:	bf 2e       	mov	r11, r31
     b00:	ce 2e       	mov	r12, r30
     b02:	de 2e       	mov	r13, r30
     b04:	ee 2e       	mov	r14, r30
     b06:	fe 2e       	mov	r15, r30
     b08:	0e 2f       	mov	r16, r30
     b0a:	1e 2f       	mov	r17, r30
     b0c:	53 d6       	rcall	.+3238   	; 0x17b4 <__adddi3>
     b0e:	07 e0       	ldi	r16, 0x07	; 7
     b10:	38 d6       	rcall	.+3184   	; 0x1782 <__ashldi3>
     b12:	29 51       	subi	r18, 0x19	; 25
     b14:	3c 4f       	sbci	r19, 0xFC	; 252
     b16:	4f 4f       	sbci	r20, 0xFF	; 255
     b18:	5f 4f       	sbci	r21, 0xFF	; 255
     b1a:	6f 4f       	sbci	r22, 0xFF	; 255
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	8f 4f       	sbci	r24, 0xFF	; 255
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
     b22:	90 d5       	rcall	.+2848   	; 0x1644 <__floatundisf>
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e8       	ldi	r19, 0x80	; 128
     b28:	4b eb       	ldi	r20, 0xBB	; 187
     b2a:	55 e4       	ldi	r21, 0x45	; 69
     b2c:	e9 d4       	rcall	.+2514   	; 0x1500 <__divsf3>
     b2e:	55 d5       	rcall	.+2730   	; 0x15da <__fixunssfdi>
     b30:	f2 2f       	mov	r31, r18
     b32:	e3 2f       	mov	r30, r19
     b34:	8f 2f       	mov	r24, r31
     b36:	9e 2f       	mov	r25, r30
     b38:	a4 2f       	mov	r26, r20
     b3a:	b5 2f       	mov	r27, r21
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	a1 05       	cpc	r26, r1
     b46:	b1 05       	cpc	r27, r1
     b48:	c9 f7       	brne	.-14     	; 0xb3c <displaySequence+0x100>
// Loops through the memory sequence array and displays the sequence
void displaySequence(void)
{
	int i;
	
	for(i = 0; i < count; i++)
     b4a:	21 96       	adiw	r28, 0x01	; 1
     b4c:	80 91 aa 21 	lds	r24, 0x21AA
     b50:	90 91 ab 21 	lds	r25, 0x21AB
     b54:	c8 17       	cp	r28, r24
     b56:	d9 07       	cpc	r29, r25
     b58:	0c f4       	brge	.+2      	; 0xb5c <displaySequence+0x120>
     b5a:	8c cf       	rjmp	.-232    	; 0xa74 <displaySequence+0x38>
		
		delay_ms(globalDelay);
	}
	
	return;
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	bf 90       	pop	r11
     b6e:	af 90       	pop	r10
     b70:	9f 90       	pop	r9
     b72:	8f 90       	pop	r8
     b74:	08 95       	ret

00000b76 <toggleInputLight>:
			break;
	}
}

void toggleInputLight(LED_t outputButton)
{
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
	switch(outputButton)
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	09 f4       	brne	.+2      	; 0xb8c <toggleInputLight+0x16>
     b8a:	64 c0       	rjmp	.+200    	; 0xc54 <toggleInputLight+0xde>
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <toggleInputLight+0x1a>
     b8e:	be c0       	rjmp	.+380    	; 0xd0c <toggleInputLight+0x196>
     b90:	82 30       	cpi	r24, 0x02	; 2
     b92:	21 f0       	breq	.+8      	; 0xb9c <toggleInputLight+0x26>
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	09 f4       	brne	.+2      	; 0xb9a <toggleInputLight+0x24>
     b98:	15 c1       	rjmp	.+554    	; 0xdc4 <toggleInputLight+0x24e>
     b9a:	6f c1       	rjmp	.+734    	; 0xe7a <toggleInputLight+0x304>
	{
		case WHITE_LED:
			TOGGLE(PORTA.OUT, WHITE_LED);
     b9c:	e0 e0       	ldi	r30, 0x00	; 0
     b9e:	f6 e0       	ldi	r31, 0x06	; 6
     ba0:	94 81       	ldd	r25, Z+4	; 0x04
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	89 27       	eor	r24, r25
     ba6:	84 83       	std	Z+4, r24	; 0x04
			delay_ms(inputDelay);
     ba8:	f0 91 07 20 	lds	r31, 0x2007
     bac:	a0 91 06 20 	lds	r26, 0x2006
     bb0:	ef 2f       	mov	r30, r31
     bb2:	ee 0f       	add	r30, r30
     bb4:	ee 0b       	sbc	r30, r30
     bb6:	2a 2f       	mov	r18, r26
     bb8:	3f 2f       	mov	r19, r31
     bba:	4e 2f       	mov	r20, r30
     bbc:	5e 2f       	mov	r21, r30
     bbe:	6e 2f       	mov	r22, r30
     bc0:	7e 2f       	mov	r23, r30
     bc2:	8e 2f       	mov	r24, r30
     bc4:	9e 2f       	mov	r25, r30
     bc6:	05 e0       	ldi	r16, 0x05	; 5
     bc8:	dc d5       	rcall	.+3000   	; 0x1782 <__ashldi3>
     bca:	aa 2e       	mov	r10, r26
     bcc:	bf 2e       	mov	r11, r31
     bce:	ce 2e       	mov	r12, r30
     bd0:	de 2e       	mov	r13, r30
     bd2:	ee 2e       	mov	r14, r30
     bd4:	fe 2e       	mov	r15, r30
     bd6:	0e 2f       	mov	r16, r30
     bd8:	1e 2f       	mov	r17, r30
     bda:	f5 d5       	rcall	.+3050   	; 0x17c6 <__subdi3>
     bdc:	a2 2e       	mov	r10, r18
     bde:	b3 2e       	mov	r11, r19
     be0:	c4 2e       	mov	r12, r20
     be2:	d5 2e       	mov	r13, r21
     be4:	e6 2e       	mov	r14, r22
     be6:	f7 2e       	mov	r15, r23
     be8:	b8 2f       	mov	r27, r24
     bea:	19 2f       	mov	r17, r25
     bec:	06 e0       	ldi	r16, 0x06	; 6
     bee:	c9 d5       	rcall	.+2962   	; 0x1782 <__ashldi3>
     bf0:	0b 2f       	mov	r16, r27
     bf2:	e9 d5       	rcall	.+3026   	; 0x17c6 <__subdi3>
     bf4:	03 e0       	ldi	r16, 0x03	; 3
     bf6:	c5 d5       	rcall	.+2954   	; 0x1782 <__ashldi3>
     bf8:	aa 2e       	mov	r10, r26
     bfa:	bf 2e       	mov	r11, r31
     bfc:	ce 2e       	mov	r12, r30
     bfe:	de 2e       	mov	r13, r30
     c00:	ee 2e       	mov	r14, r30
     c02:	fe 2e       	mov	r15, r30
     c04:	0e 2f       	mov	r16, r30
     c06:	1e 2f       	mov	r17, r30
     c08:	d5 d5       	rcall	.+2986   	; 0x17b4 <__adddi3>
     c0a:	07 e0       	ldi	r16, 0x07	; 7
     c0c:	ba d5       	rcall	.+2932   	; 0x1782 <__ashldi3>
     c0e:	29 51       	subi	r18, 0x19	; 25
     c10:	3c 4f       	sbci	r19, 0xFC	; 252
     c12:	4f 4f       	sbci	r20, 0xFF	; 255
     c14:	5f 4f       	sbci	r21, 0xFF	; 255
     c16:	6f 4f       	sbci	r22, 0xFF	; 255
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	8f 4f       	sbci	r24, 0xFF	; 255
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	12 d5       	rcall	.+2596   	; 0x1644 <__floatundisf>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e8       	ldi	r19, 0x80	; 128
     c24:	4b eb       	ldi	r20, 0xBB	; 187
     c26:	55 e4       	ldi	r21, 0x45	; 69
     c28:	6b d4       	rcall	.+2262   	; 0x1500 <__divsf3>
     c2a:	d7 d4       	rcall	.+2478   	; 0x15da <__fixunssfdi>
     c2c:	f2 2f       	mov	r31, r18
     c2e:	e3 2f       	mov	r30, r19
     c30:	8f 2f       	mov	r24, r31
     c32:	9e 2f       	mov	r25, r30
     c34:	a4 2f       	mov	r26, r20
     c36:	b5 2f       	mov	r27, r21
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	a1 09       	sbc	r26, r1
     c3c:	b1 09       	sbc	r27, r1
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	a1 05       	cpc	r26, r1
     c42:	b1 05       	cpc	r27, r1
     c44:	c9 f7       	brne	.-14     	; 0xc38 <toggleInputLight+0xc2>
			TOGGLE(PORTA.OUT, WHITE_LED);
     c46:	e0 e0       	ldi	r30, 0x00	; 0
     c48:	f6 e0       	ldi	r31, 0x06	; 6
     c4a:	94 81       	ldd	r25, Z+4	; 0x04
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	89 27       	eor	r24, r25
     c50:	84 83       	std	Z+4, r24	; 0x04
			break;
     c52:	13 c1       	rjmp	.+550    	; 0xe7a <toggleInputLight+0x304>
		case BLUE_LED:
			TOGGLE(PORTA.OUT, BLUE_LED);
     c54:	e0 e0       	ldi	r30, 0x00	; 0
     c56:	f6 e0       	ldi	r31, 0x06	; 6
     c58:	94 81       	ldd	r25, Z+4	; 0x04
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	89 27       	eor	r24, r25
     c5e:	84 83       	std	Z+4, r24	; 0x04
			delay_ms(inputDelay);
     c60:	f0 91 07 20 	lds	r31, 0x2007
     c64:	a0 91 06 20 	lds	r26, 0x2006
     c68:	ef 2f       	mov	r30, r31
     c6a:	ee 0f       	add	r30, r30
     c6c:	ee 0b       	sbc	r30, r30
     c6e:	2a 2f       	mov	r18, r26
     c70:	3f 2f       	mov	r19, r31
     c72:	4e 2f       	mov	r20, r30
     c74:	5e 2f       	mov	r21, r30
     c76:	6e 2f       	mov	r22, r30
     c78:	7e 2f       	mov	r23, r30
     c7a:	8e 2f       	mov	r24, r30
     c7c:	9e 2f       	mov	r25, r30
     c7e:	05 e0       	ldi	r16, 0x05	; 5
     c80:	80 d5       	rcall	.+2816   	; 0x1782 <__ashldi3>
     c82:	aa 2e       	mov	r10, r26
     c84:	bf 2e       	mov	r11, r31
     c86:	ce 2e       	mov	r12, r30
     c88:	de 2e       	mov	r13, r30
     c8a:	ee 2e       	mov	r14, r30
     c8c:	fe 2e       	mov	r15, r30
     c8e:	0e 2f       	mov	r16, r30
     c90:	1e 2f       	mov	r17, r30
     c92:	99 d5       	rcall	.+2866   	; 0x17c6 <__subdi3>
     c94:	a2 2e       	mov	r10, r18
     c96:	b3 2e       	mov	r11, r19
     c98:	c4 2e       	mov	r12, r20
     c9a:	d5 2e       	mov	r13, r21
     c9c:	e6 2e       	mov	r14, r22
     c9e:	f7 2e       	mov	r15, r23
     ca0:	b8 2f       	mov	r27, r24
     ca2:	19 2f       	mov	r17, r25
     ca4:	06 e0       	ldi	r16, 0x06	; 6
     ca6:	6d d5       	rcall	.+2778   	; 0x1782 <__ashldi3>
     ca8:	0b 2f       	mov	r16, r27
     caa:	8d d5       	rcall	.+2842   	; 0x17c6 <__subdi3>
     cac:	03 e0       	ldi	r16, 0x03	; 3
     cae:	69 d5       	rcall	.+2770   	; 0x1782 <__ashldi3>
     cb0:	aa 2e       	mov	r10, r26
     cb2:	bf 2e       	mov	r11, r31
     cb4:	ce 2e       	mov	r12, r30
     cb6:	de 2e       	mov	r13, r30
     cb8:	ee 2e       	mov	r14, r30
     cba:	fe 2e       	mov	r15, r30
     cbc:	0e 2f       	mov	r16, r30
     cbe:	1e 2f       	mov	r17, r30
     cc0:	79 d5       	rcall	.+2802   	; 0x17b4 <__adddi3>
     cc2:	07 e0       	ldi	r16, 0x07	; 7
     cc4:	5e d5       	rcall	.+2748   	; 0x1782 <__ashldi3>
     cc6:	29 51       	subi	r18, 0x19	; 25
     cc8:	3c 4f       	sbci	r19, 0xFC	; 252
     cca:	4f 4f       	sbci	r20, 0xFF	; 255
     ccc:	5f 4f       	sbci	r21, 0xFF	; 255
     cce:	6f 4f       	sbci	r22, 0xFF	; 255
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	8f 4f       	sbci	r24, 0xFF	; 255
     cd4:	9f 4f       	sbci	r25, 0xFF	; 255
     cd6:	b6 d4       	rcall	.+2412   	; 0x1644 <__floatundisf>
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e8       	ldi	r19, 0x80	; 128
     cdc:	4b eb       	ldi	r20, 0xBB	; 187
     cde:	55 e4       	ldi	r21, 0x45	; 69
     ce0:	0f d4       	rcall	.+2078   	; 0x1500 <__divsf3>
     ce2:	7b d4       	rcall	.+2294   	; 0x15da <__fixunssfdi>
     ce4:	f2 2f       	mov	r31, r18
     ce6:	e3 2f       	mov	r30, r19
     ce8:	8f 2f       	mov	r24, r31
     cea:	9e 2f       	mov	r25, r30
     cec:	a4 2f       	mov	r26, r20
     cee:	b5 2f       	mov	r27, r21
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	a1 09       	sbc	r26, r1
     cf4:	b1 09       	sbc	r27, r1
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	a1 05       	cpc	r26, r1
     cfa:	b1 05       	cpc	r27, r1
     cfc:	c9 f7       	brne	.-14     	; 0xcf0 <toggleInputLight+0x17a>
			TOGGLE(PORTA.OUT, BLUE_LED);
     cfe:	e0 e0       	ldi	r30, 0x00	; 0
     d00:	f6 e0       	ldi	r31, 0x06	; 6
     d02:	94 81       	ldd	r25, Z+4	; 0x04
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	89 27       	eor	r24, r25
     d08:	84 83       	std	Z+4, r24	; 0x04
			break;
     d0a:	b7 c0       	rjmp	.+366    	; 0xe7a <toggleInputLight+0x304>
		case GREEN_LED:
			TOGGLE(PORTA.OUT, GREEN_LED);
     d0c:	e0 e0       	ldi	r30, 0x00	; 0
     d0e:	f6 e0       	ldi	r31, 0x06	; 6
     d10:	94 81       	ldd	r25, Z+4	; 0x04
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	89 27       	eor	r24, r25
     d16:	84 83       	std	Z+4, r24	; 0x04
			delay_ms(inputDelay);
     d18:	f0 91 07 20 	lds	r31, 0x2007
     d1c:	a0 91 06 20 	lds	r26, 0x2006
     d20:	ef 2f       	mov	r30, r31
     d22:	ee 0f       	add	r30, r30
     d24:	ee 0b       	sbc	r30, r30
     d26:	2a 2f       	mov	r18, r26
     d28:	3f 2f       	mov	r19, r31
     d2a:	4e 2f       	mov	r20, r30
     d2c:	5e 2f       	mov	r21, r30
     d2e:	6e 2f       	mov	r22, r30
     d30:	7e 2f       	mov	r23, r30
     d32:	8e 2f       	mov	r24, r30
     d34:	9e 2f       	mov	r25, r30
     d36:	05 e0       	ldi	r16, 0x05	; 5
     d38:	24 d5       	rcall	.+2632   	; 0x1782 <__ashldi3>
     d3a:	aa 2e       	mov	r10, r26
     d3c:	bf 2e       	mov	r11, r31
     d3e:	ce 2e       	mov	r12, r30
     d40:	de 2e       	mov	r13, r30
     d42:	ee 2e       	mov	r14, r30
     d44:	fe 2e       	mov	r15, r30
     d46:	0e 2f       	mov	r16, r30
     d48:	1e 2f       	mov	r17, r30
     d4a:	3d d5       	rcall	.+2682   	; 0x17c6 <__subdi3>
     d4c:	a2 2e       	mov	r10, r18
     d4e:	b3 2e       	mov	r11, r19
     d50:	c4 2e       	mov	r12, r20
     d52:	d5 2e       	mov	r13, r21
     d54:	e6 2e       	mov	r14, r22
     d56:	f7 2e       	mov	r15, r23
     d58:	b8 2f       	mov	r27, r24
     d5a:	19 2f       	mov	r17, r25
     d5c:	06 e0       	ldi	r16, 0x06	; 6
     d5e:	11 d5       	rcall	.+2594   	; 0x1782 <__ashldi3>
     d60:	0b 2f       	mov	r16, r27
     d62:	31 d5       	rcall	.+2658   	; 0x17c6 <__subdi3>
     d64:	03 e0       	ldi	r16, 0x03	; 3
     d66:	0d d5       	rcall	.+2586   	; 0x1782 <__ashldi3>
     d68:	aa 2e       	mov	r10, r26
     d6a:	bf 2e       	mov	r11, r31
     d6c:	ce 2e       	mov	r12, r30
     d6e:	de 2e       	mov	r13, r30
     d70:	ee 2e       	mov	r14, r30
     d72:	fe 2e       	mov	r15, r30
     d74:	0e 2f       	mov	r16, r30
     d76:	1e 2f       	mov	r17, r30
     d78:	1d d5       	rcall	.+2618   	; 0x17b4 <__adddi3>
     d7a:	07 e0       	ldi	r16, 0x07	; 7
     d7c:	02 d5       	rcall	.+2564   	; 0x1782 <__ashldi3>
     d7e:	29 51       	subi	r18, 0x19	; 25
     d80:	3c 4f       	sbci	r19, 0xFC	; 252
     d82:	4f 4f       	sbci	r20, 0xFF	; 255
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	6f 4f       	sbci	r22, 0xFF	; 255
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	8f 4f       	sbci	r24, 0xFF	; 255
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	5a d4       	rcall	.+2228   	; 0x1644 <__floatundisf>
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e8       	ldi	r19, 0x80	; 128
     d94:	4b eb       	ldi	r20, 0xBB	; 187
     d96:	55 e4       	ldi	r21, 0x45	; 69
     d98:	b3 d3       	rcall	.+1894   	; 0x1500 <__divsf3>
     d9a:	1f d4       	rcall	.+2110   	; 0x15da <__fixunssfdi>
     d9c:	f2 2f       	mov	r31, r18
     d9e:	e3 2f       	mov	r30, r19
     da0:	8f 2f       	mov	r24, r31
     da2:	9e 2f       	mov	r25, r30
     da4:	a4 2f       	mov	r26, r20
     da6:	b5 2f       	mov	r27, r21
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	a1 09       	sbc	r26, r1
     dac:	b1 09       	sbc	r27, r1
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	a1 05       	cpc	r26, r1
     db2:	b1 05       	cpc	r27, r1
     db4:	c9 f7       	brne	.-14     	; 0xda8 <toggleInputLight+0x232>
			TOGGLE(PORTA.OUT, GREEN_LED);
     db6:	e0 e0       	ldi	r30, 0x00	; 0
     db8:	f6 e0       	ldi	r31, 0x06	; 6
     dba:	94 81       	ldd	r25, Z+4	; 0x04
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	89 27       	eor	r24, r25
     dc0:	84 83       	std	Z+4, r24	; 0x04
			break;
     dc2:	5b c0       	rjmp	.+182    	; 0xe7a <toggleInputLight+0x304>
		case RED_LED:
			TOGGLE(PORTA.OUT, RED_LED);
     dc4:	e0 e0       	ldi	r30, 0x00	; 0
     dc6:	f6 e0       	ldi	r31, 0x06	; 6
     dc8:	94 81       	ldd	r25, Z+4	; 0x04
     dca:	88 e0       	ldi	r24, 0x08	; 8
     dcc:	89 27       	eor	r24, r25
     dce:	84 83       	std	Z+4, r24	; 0x04
			delay_ms(inputDelay);
     dd0:	f0 91 07 20 	lds	r31, 0x2007
     dd4:	a0 91 06 20 	lds	r26, 0x2006
     dd8:	ef 2f       	mov	r30, r31
     dda:	ee 0f       	add	r30, r30
     ddc:	ee 0b       	sbc	r30, r30
     dde:	2a 2f       	mov	r18, r26
     de0:	3f 2f       	mov	r19, r31
     de2:	4e 2f       	mov	r20, r30
     de4:	5e 2f       	mov	r21, r30
     de6:	6e 2f       	mov	r22, r30
     de8:	7e 2f       	mov	r23, r30
     dea:	8e 2f       	mov	r24, r30
     dec:	9e 2f       	mov	r25, r30
     dee:	05 e0       	ldi	r16, 0x05	; 5
     df0:	c8 d4       	rcall	.+2448   	; 0x1782 <__ashldi3>
     df2:	aa 2e       	mov	r10, r26
     df4:	bf 2e       	mov	r11, r31
     df6:	ce 2e       	mov	r12, r30
     df8:	de 2e       	mov	r13, r30
     dfa:	ee 2e       	mov	r14, r30
     dfc:	fe 2e       	mov	r15, r30
     dfe:	0e 2f       	mov	r16, r30
     e00:	1e 2f       	mov	r17, r30
     e02:	e1 d4       	rcall	.+2498   	; 0x17c6 <__subdi3>
     e04:	a2 2e       	mov	r10, r18
     e06:	b3 2e       	mov	r11, r19
     e08:	c4 2e       	mov	r12, r20
     e0a:	d5 2e       	mov	r13, r21
     e0c:	e6 2e       	mov	r14, r22
     e0e:	f7 2e       	mov	r15, r23
     e10:	b8 2f       	mov	r27, r24
     e12:	19 2f       	mov	r17, r25
     e14:	06 e0       	ldi	r16, 0x06	; 6
     e16:	b5 d4       	rcall	.+2410   	; 0x1782 <__ashldi3>
     e18:	0b 2f       	mov	r16, r27
     e1a:	d5 d4       	rcall	.+2474   	; 0x17c6 <__subdi3>
     e1c:	03 e0       	ldi	r16, 0x03	; 3
     e1e:	b1 d4       	rcall	.+2402   	; 0x1782 <__ashldi3>
     e20:	aa 2e       	mov	r10, r26
     e22:	bf 2e       	mov	r11, r31
     e24:	ce 2e       	mov	r12, r30
     e26:	de 2e       	mov	r13, r30
     e28:	ee 2e       	mov	r14, r30
     e2a:	fe 2e       	mov	r15, r30
     e2c:	0e 2f       	mov	r16, r30
     e2e:	1e 2f       	mov	r17, r30
     e30:	c1 d4       	rcall	.+2434   	; 0x17b4 <__adddi3>
     e32:	07 e0       	ldi	r16, 0x07	; 7
     e34:	a6 d4       	rcall	.+2380   	; 0x1782 <__ashldi3>
     e36:	29 51       	subi	r18, 0x19	; 25
     e38:	3c 4f       	sbci	r19, 0xFC	; 252
     e3a:	4f 4f       	sbci	r20, 0xFF	; 255
     e3c:	5f 4f       	sbci	r21, 0xFF	; 255
     e3e:	6f 4f       	sbci	r22, 0xFF	; 255
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	8f 4f       	sbci	r24, 0xFF	; 255
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	fe d3       	rcall	.+2044   	; 0x1644 <__floatundisf>
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e8       	ldi	r19, 0x80	; 128
     e4c:	4b eb       	ldi	r20, 0xBB	; 187
     e4e:	55 e4       	ldi	r21, 0x45	; 69
     e50:	57 d3       	rcall	.+1710   	; 0x1500 <__divsf3>
     e52:	c3 d3       	rcall	.+1926   	; 0x15da <__fixunssfdi>
     e54:	f2 2f       	mov	r31, r18
     e56:	e3 2f       	mov	r30, r19
     e58:	8f 2f       	mov	r24, r31
     e5a:	9e 2f       	mov	r25, r30
     e5c:	a4 2f       	mov	r26, r20
     e5e:	b5 2f       	mov	r27, r21
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	a1 09       	sbc	r26, r1
     e64:	b1 09       	sbc	r27, r1
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	a1 05       	cpc	r26, r1
     e6a:	b1 05       	cpc	r27, r1
     e6c:	c9 f7       	brne	.-14     	; 0xe60 <toggleInputLight+0x2ea>
			TOGGLE(PORTA.OUT, RED_LED);
     e6e:	e0 e0       	ldi	r30, 0x00	; 0
     e70:	f6 e0       	ldi	r31, 0x06	; 6
     e72:	94 81       	ldd	r25, Z+4	; 0x04
     e74:	88 e0       	ldi	r24, 0x08	; 8
     e76:	89 27       	eor	r24, r25
     e78:	84 83       	std	Z+4, r24	; 0x04
			break;
		default:
			break;
	}	
}
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	bf 90       	pop	r11
     e88:	af 90       	pop	r10
     e8a:	08 95       	ret

00000e8c <__vector_2>:
}

// Interrupt service routines for the LED buttons to play the game with.
// GREEN LED Interrupt Service Routine.
ISR(PORTC_INT0_vect)
{
     e8c:	1f 92       	push	r1
     e8e:	0f 92       	push	r0
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	0f 92       	push	r0
     e94:	11 24       	eor	r1, r1
     e96:	0b b6       	in	r0, 0x3b	; 59
     e98:	0f 92       	push	r0
     e9a:	af 92       	push	r10
     e9c:	bf 92       	push	r11
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	2f 93       	push	r18
     eac:	3f 93       	push	r19
     eae:	4f 93       	push	r20
     eb0:	5f 93       	push	r21
     eb2:	6f 93       	push	r22
     eb4:	7f 93       	push	r23
     eb6:	8f 93       	push	r24
     eb8:	9f 93       	push	r25
     eba:	af 93       	push	r26
     ebc:	bf 93       	push	r27
     ebe:	ef 93       	push	r30
     ec0:	ff 93       	push	r31
	cli();
     ec2:	f8 94       	cli
	
	if(menuMode == 1)
     ec4:	80 91 04 20 	lds	r24, 0x2004
     ec8:	90 91 05 20 	lds	r25, 0x2005
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	09 f0       	breq	.+2      	; 0xed2 <__vector_2+0x46>
     ed0:	d4 c0       	rjmp	.+424    	; 0x107a <__vector_2+0x1ee>
     ed2:	8a e0       	ldi	r24, 0x0A	; 10
     ed4:	9b e8       	ldi	r25, 0x8B	; 139
     ed6:	a2 e0       	ldi	r26, 0x02	; 2
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	a1 09       	sbc	r26, r1
     ede:	b1 09       	sbc	r27, r1
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	a1 05       	cpc	r26, r1
     ee4:	b1 05       	cpc	r27, r1
     ee6:	c9 f7       	brne	.-14     	; 0xeda <__vector_2+0x4e>
	{
		delay_ms(500);
		TOGGLE(PORTA.OUT, WHITE_LED);
     ee8:	e0 e0       	ldi	r30, 0x00	; 0
     eea:	f6 e0       	ldi	r31, 0x06	; 6
     eec:	94 81       	ldd	r25, Z+4	; 0x04
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	89 27       	eor	r24, r25
     ef2:	84 83       	std	Z+4, r24	; 0x04
		TOGGLE(PORTA.OUT, GREEN_LED);
     ef4:	94 81       	ldd	r25, Z+4	; 0x04
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	89 27       	eor	r24, r25
     efa:	84 83       	std	Z+4, r24	; 0x04
		TOGGLE(PORTA.OUT, RED_LED);
     efc:	94 81       	ldd	r25, Z+4	; 0x04
     efe:	88 e0       	ldi	r24, 0x08	; 8
     f00:	89 27       	eor	r24, r25
     f02:	84 83       	std	Z+4, r24	; 0x04
		TOGGLE(PORTA.OUT, BLUE_LED);
     f04:	94 81       	ldd	r25, Z+4	; 0x04
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	89 27       	eor	r24, r25
     f0a:	84 83       	std	Z+4, r24	; 0x04
		delay_ms(globalDelay);
     f0c:	f0 91 09 20 	lds	r31, 0x2009
     f10:	a0 91 08 20 	lds	r26, 0x2008
     f14:	ef 2f       	mov	r30, r31
     f16:	ee 0f       	add	r30, r30
     f18:	ee 0b       	sbc	r30, r30
     f1a:	2a 2f       	mov	r18, r26
     f1c:	3f 2f       	mov	r19, r31
     f1e:	4e 2f       	mov	r20, r30
     f20:	5e 2f       	mov	r21, r30
     f22:	6e 2f       	mov	r22, r30
     f24:	7e 2f       	mov	r23, r30
     f26:	8e 2f       	mov	r24, r30
     f28:	9e 2f       	mov	r25, r30
     f2a:	05 e0       	ldi	r16, 0x05	; 5
     f2c:	2a d4       	rcall	.+2132   	; 0x1782 <__ashldi3>
     f2e:	aa 2e       	mov	r10, r26
     f30:	bf 2e       	mov	r11, r31
     f32:	ce 2e       	mov	r12, r30
     f34:	de 2e       	mov	r13, r30
     f36:	ee 2e       	mov	r14, r30
     f38:	fe 2e       	mov	r15, r30
     f3a:	0e 2f       	mov	r16, r30
     f3c:	1e 2f       	mov	r17, r30
     f3e:	43 d4       	rcall	.+2182   	; 0x17c6 <__subdi3>
     f40:	a2 2e       	mov	r10, r18
     f42:	b3 2e       	mov	r11, r19
     f44:	c4 2e       	mov	r12, r20
     f46:	d5 2e       	mov	r13, r21
     f48:	e6 2e       	mov	r14, r22
     f4a:	f7 2e       	mov	r15, r23
     f4c:	b8 2f       	mov	r27, r24
     f4e:	19 2f       	mov	r17, r25
     f50:	06 e0       	ldi	r16, 0x06	; 6
     f52:	17 d4       	rcall	.+2094   	; 0x1782 <__ashldi3>
     f54:	0b 2f       	mov	r16, r27
     f56:	37 d4       	rcall	.+2158   	; 0x17c6 <__subdi3>
     f58:	03 e0       	ldi	r16, 0x03	; 3
     f5a:	13 d4       	rcall	.+2086   	; 0x1782 <__ashldi3>
     f5c:	aa 2e       	mov	r10, r26
     f5e:	bf 2e       	mov	r11, r31
     f60:	ce 2e       	mov	r12, r30
     f62:	de 2e       	mov	r13, r30
     f64:	ee 2e       	mov	r14, r30
     f66:	fe 2e       	mov	r15, r30
     f68:	0e 2f       	mov	r16, r30
     f6a:	1e 2f       	mov	r17, r30
     f6c:	23 d4       	rcall	.+2118   	; 0x17b4 <__adddi3>
     f6e:	07 e0       	ldi	r16, 0x07	; 7
     f70:	08 d4       	rcall	.+2064   	; 0x1782 <__ashldi3>
     f72:	29 51       	subi	r18, 0x19	; 25
     f74:	3c 4f       	sbci	r19, 0xFC	; 252
     f76:	4f 4f       	sbci	r20, 0xFF	; 255
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
     f7a:	6f 4f       	sbci	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	60 d3       	rcall	.+1728   	; 0x1644 <__floatundisf>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e8       	ldi	r19, 0x80	; 128
     f88:	4b eb       	ldi	r20, 0xBB	; 187
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	b9 d2       	rcall	.+1394   	; 0x1500 <__divsf3>
     f8e:	25 d3       	rcall	.+1610   	; 0x15da <__fixunssfdi>
     f90:	f2 2f       	mov	r31, r18
     f92:	e3 2f       	mov	r30, r19
     f94:	8f 2f       	mov	r24, r31
     f96:	9e 2f       	mov	r25, r30
     f98:	a4 2f       	mov	r26, r20
     f9a:	b5 2f       	mov	r27, r21
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	a1 09       	sbc	r26, r1
     fa0:	b1 09       	sbc	r27, r1
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	a1 05       	cpc	r26, r1
     fa6:	b1 05       	cpc	r27, r1
     fa8:	c9 f7       	brne	.-14     	; 0xf9c <__vector_2+0x110>
		TOGGLE(PORTA.OUT, WHITE_LED);
     faa:	e0 e0       	ldi	r30, 0x00	; 0
     fac:	f6 e0       	ldi	r31, 0x06	; 6
     fae:	94 81       	ldd	r25, Z+4	; 0x04
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	89 27       	eor	r24, r25
     fb4:	84 83       	std	Z+4, r24	; 0x04
		TOGGLE(PORTA.OUT, GREEN_LED);
     fb6:	94 81       	ldd	r25, Z+4	; 0x04
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	89 27       	eor	r24, r25
     fbc:	84 83       	std	Z+4, r24	; 0x04
		TOGGLE(PORTA.OUT, RED_LED);
     fbe:	94 81       	ldd	r25, Z+4	; 0x04
     fc0:	88 e0       	ldi	r24, 0x08	; 8
     fc2:	89 27       	eor	r24, r25
     fc4:	84 83       	std	Z+4, r24	; 0x04
		TOGGLE(PORTA.OUT, BLUE_LED);
     fc6:	94 81       	ldd	r25, Z+4	; 0x04
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	89 27       	eor	r24, r25
     fcc:	84 83       	std	Z+4, r24	; 0x04
		delay_ms(globalDelay);
     fce:	f0 91 09 20 	lds	r31, 0x2009
     fd2:	a0 91 08 20 	lds	r26, 0x2008
     fd6:	ef 2f       	mov	r30, r31
     fd8:	ee 0f       	add	r30, r30
     fda:	ee 0b       	sbc	r30, r30
     fdc:	2a 2f       	mov	r18, r26
     fde:	3f 2f       	mov	r19, r31
     fe0:	4e 2f       	mov	r20, r30
     fe2:	5e 2f       	mov	r21, r30
     fe4:	6e 2f       	mov	r22, r30
     fe6:	7e 2f       	mov	r23, r30
     fe8:	8e 2f       	mov	r24, r30
     fea:	9e 2f       	mov	r25, r30
     fec:	05 e0       	ldi	r16, 0x05	; 5
     fee:	c9 d3       	rcall	.+1938   	; 0x1782 <__ashldi3>
     ff0:	aa 2e       	mov	r10, r26
     ff2:	bf 2e       	mov	r11, r31
     ff4:	ce 2e       	mov	r12, r30
     ff6:	de 2e       	mov	r13, r30
     ff8:	ee 2e       	mov	r14, r30
     ffa:	fe 2e       	mov	r15, r30
     ffc:	0e 2f       	mov	r16, r30
     ffe:	1e 2f       	mov	r17, r30
    1000:	e2 d3       	rcall	.+1988   	; 0x17c6 <__subdi3>
    1002:	a2 2e       	mov	r10, r18
    1004:	b3 2e       	mov	r11, r19
    1006:	c4 2e       	mov	r12, r20
    1008:	d5 2e       	mov	r13, r21
    100a:	e6 2e       	mov	r14, r22
    100c:	f7 2e       	mov	r15, r23
    100e:	b8 2f       	mov	r27, r24
    1010:	19 2f       	mov	r17, r25
    1012:	06 e0       	ldi	r16, 0x06	; 6
    1014:	b6 d3       	rcall	.+1900   	; 0x1782 <__ashldi3>
    1016:	0b 2f       	mov	r16, r27
    1018:	d6 d3       	rcall	.+1964   	; 0x17c6 <__subdi3>
    101a:	03 e0       	ldi	r16, 0x03	; 3
    101c:	b2 d3       	rcall	.+1892   	; 0x1782 <__ashldi3>
    101e:	aa 2e       	mov	r10, r26
    1020:	bf 2e       	mov	r11, r31
    1022:	ce 2e       	mov	r12, r30
    1024:	de 2e       	mov	r13, r30
    1026:	ee 2e       	mov	r14, r30
    1028:	fe 2e       	mov	r15, r30
    102a:	0e 2f       	mov	r16, r30
    102c:	1e 2f       	mov	r17, r30
    102e:	c2 d3       	rcall	.+1924   	; 0x17b4 <__adddi3>
    1030:	07 e0       	ldi	r16, 0x07	; 7
    1032:	a7 d3       	rcall	.+1870   	; 0x1782 <__ashldi3>
    1034:	29 51       	subi	r18, 0x19	; 25
    1036:	3c 4f       	sbci	r19, 0xFC	; 252
    1038:	4f 4f       	sbci	r20, 0xFF	; 255
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	6f 4f       	sbci	r22, 0xFF	; 255
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	8f 4f       	sbci	r24, 0xFF	; 255
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	ff d2       	rcall	.+1534   	; 0x1644 <__floatundisf>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e8       	ldi	r19, 0x80	; 128
    104a:	4b eb       	ldi	r20, 0xBB	; 187
    104c:	55 e4       	ldi	r21, 0x45	; 69
    104e:	58 d2       	rcall	.+1200   	; 0x1500 <__divsf3>
    1050:	c4 d2       	rcall	.+1416   	; 0x15da <__fixunssfdi>
    1052:	f2 2f       	mov	r31, r18
    1054:	e3 2f       	mov	r30, r19
    1056:	8f 2f       	mov	r24, r31
    1058:	9e 2f       	mov	r25, r30
    105a:	a4 2f       	mov	r26, r20
    105c:	b5 2f       	mov	r27, r21
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	a1 09       	sbc	r26, r1
    1062:	b1 09       	sbc	r27, r1
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	a1 05       	cpc	r26, r1
    1068:	b1 05       	cpc	r27, r1
    106a:	c9 f7       	brne	.-14     	; 0x105e <__vector_2+0x1d2>
		gameRun = 1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	80 93 0a 20 	sts	0x200A, r24
    1074:	90 93 0b 20 	sts	0x200B, r25
    1078:	06 c0       	rjmp	.+12     	; 0x1086 <__vector_2+0x1fa>
	}
	
	else
	{
		toggleInputLight(GREEN_LED);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	7c dd       	rcall	.-1288   	; 0xb76 <toggleInputLight>
		lastButtonRead = GREEN_LED;
    107e:	10 92 12 20 	sts	0x2012, r1
    1082:	10 92 13 20 	sts	0x2013, r1
	}
}
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	bf 90       	pop	r11
    10ac:	af 90       	pop	r10
    10ae:	0f 90       	pop	r0
    10b0:	0b be       	out	0x3b, r0	; 59
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	0f 90       	pop	r0
    10b8:	1f 90       	pop	r1
    10ba:	18 95       	reti

000010bc <__vector_3>:

// BLUE LED Interrupt Service Routine.
ISR(PORTC_INT1_vect)
{
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	0b b6       	in	r0, 0x3b	; 59
    10c8:	0f 92       	push	r0
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
	cli();
    10e2:	f8 94       	cli
	
	if(menuMode == 1)
    10e4:	80 91 04 20 	lds	r24, 0x2004
    10e8:	90 91 05 20 	lds	r25, 0x2005
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	71 f4       	brne	.+28     	; 0x110c <__vector_3+0x50>
	{
		lightShow();
    10f0:	87 d9       	rcall	.-3314   	; 0x400 <lightShow>
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	88 3a       	cpi	r24, 0xA8	; 168
    10fa:	21 e6       	ldi	r18, 0x61	; 97
    10fc:	92 07       	cpc	r25, r18
    10fe:	d9 f7       	brne	.-10     	; 0x10f6 <__vector_3+0x3a>
		delay_ms(75);
	}
	
	if(menuMode != 1)
    1100:	80 91 04 20 	lds	r24, 0x2004
    1104:	90 91 05 20 	lds	r25, 0x2005
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	39 f0       	breq	.+14     	; 0x111a <__vector_3+0x5e>
	{
		lastButtonRead = BLUE_LED;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	80 93 12 20 	sts	0x2012, r24
    1114:	90 93 13 20 	sts	0x2013, r25
		toggleInputLight(BLUE_LED);
    1118:	2e dd       	rcall	.-1444   	; 0xb76 <toggleInputLight>
	}	
}
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0b be       	out	0x3b, r0	; 59
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <__vector_64>:

// WHITE LED Interrupt Service Routine.
ISR(PORTD_INT0_vect)
{
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	0b b6       	in	r0, 0x3b	; 59
    114c:	0f 92       	push	r0
    114e:	4f 92       	push	r4
    1150:	5f 92       	push	r5
    1152:	6f 92       	push	r6
    1154:	7f 92       	push	r7
    1156:	8f 92       	push	r8
    1158:	9f 92       	push	r9
    115a:	af 92       	push	r10
    115c:	bf 92       	push	r11
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	ef 93       	push	r30
    1184:	ff 93       	push	r31
	cli();
    1186:	f8 94       	cli
	int k;
	
	if(menuMode == 1)
    1188:	80 91 04 20 	lds	r24, 0x2004
    118c:	90 91 05 20 	lds	r25, 0x2005
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	09 f0       	breq	.+2      	; 0x1196 <__vector_64+0x56>
    1194:	7e c0       	rjmp	.+252    	; 0x1292 <__vector_64+0x152>
	{
		for (k = 0; k < highScore - 1; k++)
    1196:	80 91 0c 20 	lds	r24, 0x200C
    119a:	90 91 0d 20 	lds	r25, 0x200D
    119e:	02 97       	sbiw	r24, 0x02	; 2
    11a0:	0c f4       	brge	.+2      	; 0x11a4 <__vector_64+0x64>
    11a2:	7e c0       	rjmp	.+252    	; 0x12a0 <__vector_64+0x160>
    11a4:	81 2c       	mov	r8, r1
    11a6:	91 2c       	mov	r9, r1
		{
			TOGGLE(PORTA.OUT, WHITE_LED);
    11a8:	c0 e0       	ldi	r28, 0x00	; 0
    11aa:	d6 e0       	ldi	r29, 0x06	; 6
    11ac:	68 94       	set
    11ae:	66 24       	eor	r6, r6
    11b0:	62 f8       	bld	r6, 2
			TOGGLE(PORTA.OUT, RED_LED);
    11b2:	68 94       	set
    11b4:	77 24       	eor	r7, r7
    11b6:	73 f8       	bld	r7, 3
			TOGGLE(PORTA.OUT, GREEN_LED);
    11b8:	55 24       	eor	r5, r5
    11ba:	53 94       	inc	r5
			TOGGLE(PORTA.OUT, BLUE_LED);
    11bc:	68 94       	set
    11be:	44 24       	eor	r4, r4
    11c0:	41 f8       	bld	r4, 1
	
	if(menuMode == 1)
	{
		for (k = 0; k < highScore - 1; k++)
		{
			TOGGLE(PORTA.OUT, WHITE_LED);
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	86 25       	eor	r24, r6
    11c6:	8c 83       	std	Y+4, r24	; 0x04
			TOGGLE(PORTA.OUT, RED_LED);
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	87 25       	eor	r24, r7
    11cc:	8c 83       	std	Y+4, r24	; 0x04
			TOGGLE(PORTA.OUT, GREEN_LED);
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	85 25       	eor	r24, r5
    11d2:	8c 83       	std	Y+4, r24	; 0x04
			TOGGLE(PORTA.OUT, BLUE_LED);
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	84 25       	eor	r24, r4
    11d8:	8c 83       	std	Y+4, r24	; 0x04
			delay_ms(globalDelay);
    11da:	f0 91 09 20 	lds	r31, 0x2009
    11de:	a0 91 08 20 	lds	r26, 0x2008
    11e2:	ef 2f       	mov	r30, r31
    11e4:	ee 0f       	add	r30, r30
    11e6:	ee 0b       	sbc	r30, r30
    11e8:	2a 2f       	mov	r18, r26
    11ea:	3f 2f       	mov	r19, r31
    11ec:	4e 2f       	mov	r20, r30
    11ee:	5e 2f       	mov	r21, r30
    11f0:	6e 2f       	mov	r22, r30
    11f2:	7e 2f       	mov	r23, r30
    11f4:	8e 2f       	mov	r24, r30
    11f6:	9e 2f       	mov	r25, r30
    11f8:	05 e0       	ldi	r16, 0x05	; 5
    11fa:	c3 d2       	rcall	.+1414   	; 0x1782 <__ashldi3>
    11fc:	aa 2e       	mov	r10, r26
    11fe:	bf 2e       	mov	r11, r31
    1200:	ce 2e       	mov	r12, r30
    1202:	de 2e       	mov	r13, r30
    1204:	ee 2e       	mov	r14, r30
    1206:	fe 2e       	mov	r15, r30
    1208:	0e 2f       	mov	r16, r30
    120a:	1e 2f       	mov	r17, r30
    120c:	dc d2       	rcall	.+1464   	; 0x17c6 <__subdi3>
    120e:	a2 2e       	mov	r10, r18
    1210:	b3 2e       	mov	r11, r19
    1212:	c4 2e       	mov	r12, r20
    1214:	d5 2e       	mov	r13, r21
    1216:	e6 2e       	mov	r14, r22
    1218:	f7 2e       	mov	r15, r23
    121a:	b8 2f       	mov	r27, r24
    121c:	19 2f       	mov	r17, r25
    121e:	06 e0       	ldi	r16, 0x06	; 6
    1220:	b0 d2       	rcall	.+1376   	; 0x1782 <__ashldi3>
    1222:	0b 2f       	mov	r16, r27
    1224:	d0 d2       	rcall	.+1440   	; 0x17c6 <__subdi3>
    1226:	03 e0       	ldi	r16, 0x03	; 3
    1228:	ac d2       	rcall	.+1368   	; 0x1782 <__ashldi3>
    122a:	aa 2e       	mov	r10, r26
    122c:	bf 2e       	mov	r11, r31
    122e:	ce 2e       	mov	r12, r30
    1230:	de 2e       	mov	r13, r30
    1232:	ee 2e       	mov	r14, r30
    1234:	fe 2e       	mov	r15, r30
    1236:	0e 2f       	mov	r16, r30
    1238:	1e 2f       	mov	r17, r30
    123a:	bc d2       	rcall	.+1400   	; 0x17b4 <__adddi3>
    123c:	07 e0       	ldi	r16, 0x07	; 7
    123e:	a1 d2       	rcall	.+1346   	; 0x1782 <__ashldi3>
    1240:	29 51       	subi	r18, 0x19	; 25
    1242:	3c 4f       	sbci	r19, 0xFC	; 252
    1244:	4f 4f       	sbci	r20, 0xFF	; 255
    1246:	5f 4f       	sbci	r21, 0xFF	; 255
    1248:	6f 4f       	sbci	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	f9 d1       	rcall	.+1010   	; 0x1644 <__floatundisf>
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e8       	ldi	r19, 0x80	; 128
    1256:	4b eb       	ldi	r20, 0xBB	; 187
    1258:	55 e4       	ldi	r21, 0x45	; 69
    125a:	52 d1       	rcall	.+676    	; 0x1500 <__divsf3>
    125c:	be d1       	rcall	.+892    	; 0x15da <__fixunssfdi>
    125e:	f2 2f       	mov	r31, r18
    1260:	e3 2f       	mov	r30, r19
    1262:	8f 2f       	mov	r24, r31
    1264:	9e 2f       	mov	r25, r30
    1266:	a4 2f       	mov	r26, r20
    1268:	b5 2f       	mov	r27, r21
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	a1 09       	sbc	r26, r1
    126e:	b1 09       	sbc	r27, r1
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	a1 05       	cpc	r26, r1
    1274:	b1 05       	cpc	r27, r1
    1276:	c9 f7       	brne	.-14     	; 0x126a <__vector_64+0x12a>
	cli();
	int k;
	
	if(menuMode == 1)
	{
		for (k = 0; k < highScore - 1; k++)
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	88 1a       	sub	r8, r24
    127c:	98 0a       	sbc	r9, r24
    127e:	80 91 0c 20 	lds	r24, 0x200C
    1282:	90 91 0d 20 	lds	r25, 0x200D
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	88 16       	cp	r8, r24
    128a:	99 06       	cpc	r9, r25
    128c:	0c f4       	brge	.+2      	; 0x1290 <__vector_64+0x150>
    128e:	99 cf       	rjmp	.-206    	; 0x11c2 <__vector_64+0x82>
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <__vector_64+0x160>
		}
	}
	
	else
	{
		lastButtonRead = WHITE_LED;
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	80 93 12 20 	sts	0x2012, r24
    129a:	90 93 13 20 	sts	0x2013, r25
		toggleInputLight(WHITE_LED);
    129e:	6b dc       	rcall	.-1834   	; 0xb76 <toggleInputLight>
	}
}
    12a0:	ff 91       	pop	r31
    12a2:	ef 91       	pop	r30
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	bf 91       	pop	r27
    12aa:	af 91       	pop	r26
    12ac:	9f 91       	pop	r25
    12ae:	8f 91       	pop	r24
    12b0:	7f 91       	pop	r23
    12b2:	6f 91       	pop	r22
    12b4:	5f 91       	pop	r21
    12b6:	4f 91       	pop	r20
    12b8:	3f 91       	pop	r19
    12ba:	2f 91       	pop	r18
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	9f 90       	pop	r9
    12ce:	8f 90       	pop	r8
    12d0:	7f 90       	pop	r7
    12d2:	6f 90       	pop	r6
    12d4:	5f 90       	pop	r5
    12d6:	4f 90       	pop	r4
    12d8:	0f 90       	pop	r0
    12da:	0b be       	out	0x3b, r0	; 59
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	0f 90       	pop	r0
    12e2:	1f 90       	pop	r1
    12e4:	18 95       	reti

000012e6 <__vector_65>:

// RED LED Interrupt Service Routine.
ISR(PORTD_INT1_vect)
{
    12e6:	1f 92       	push	r1
    12e8:	0f 92       	push	r0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	0f 92       	push	r0
    12ee:	11 24       	eor	r1, r1
    12f0:	0b b6       	in	r0, 0x3b	; 59
    12f2:	0f 92       	push	r0
    12f4:	2f 93       	push	r18
    12f6:	3f 93       	push	r19
    12f8:	4f 93       	push	r20
    12fa:	5f 93       	push	r21
    12fc:	6f 93       	push	r22
    12fe:	7f 93       	push	r23
    1300:	8f 93       	push	r24
    1302:	9f 93       	push	r25
    1304:	af 93       	push	r26
    1306:	bf 93       	push	r27
    1308:	ef 93       	push	r30
    130a:	ff 93       	push	r31
	cli();
    130c:	f8 94       	cli
	
	if(menuMode == 1)
    130e:	80 91 04 20 	lds	r24, 0x2004
    1312:	90 91 05 20 	lds	r25, 0x2005
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	49 f4       	brne	.+18     	; 0x132c <__vector_65+0x46>
	{
		eeprom_write_byte(0, 0);
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	c2 d2       	rcall	.+1412   	; 0x18a6 <__eewr_byte_x256a3bu>
		highScore = 0;
    1322:	10 92 0c 20 	sts	0x200C, r1
    1326:	10 92 0d 20 	sts	0x200D, r1
    132a:	07 c0       	rjmp	.+14     	; 0x133a <__vector_65+0x54>
	}
	
	else
	{
		lastButtonRead = RED_LED;
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	80 93 12 20 	sts	0x2012, r24
    1334:	90 93 13 20 	sts	0x2013, r25
		toggleInputLight(RED_LED);
    1338:	1e dc       	rcall	.-1988   	; 0xb76 <toggleInputLight>
	}
}
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0b be       	out	0x3b, r0	; 59
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <waitForInput>:
}

// Waits for user input.
void waitForInput(void)
{
	for(j = 0; j < 1000; j++)
    1360:	10 92 14 20 	sts	0x2014, r1
    1364:	10 92 15 20 	sts	0x2015, r1
	}	
}

// Waits for user input.
void waitForInput(void)
{
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	82 38       	cpi	r24, 0x82	; 130
    1370:	26 e0       	ldi	r18, 0x06	; 6
    1372:	92 07       	cpc	r25, r18
    1374:	d9 f7       	brne	.-10     	; 0x136c <waitForInput+0xc>
	for(j = 0; j < 1000; j++)
	{
		delay_ms(5);
		if(lastButtonRead > -1)
    1376:	80 91 12 20 	lds	r24, 0x2012
    137a:	90 91 13 20 	lds	r25, 0x2013
    137e:	99 23       	and	r25, r25
    1380:	64 f4       	brge	.+24     	; 0x139a <waitForInput+0x3a>
}

// Waits for user input.
void waitForInput(void)
{
	for(j = 0; j < 1000; j++)
    1382:	80 91 14 20 	lds	r24, 0x2014
    1386:	90 91 15 20 	lds	r25, 0x2015
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	80 93 14 20 	sts	0x2014, r24
    1390:	90 93 15 20 	sts	0x2015, r25
    1394:	88 3e       	cpi	r24, 0xE8	; 232
    1396:	93 40       	sbci	r25, 0x03	; 3
    1398:	3c f3       	brlt	.-50     	; 0x1368 <waitForInput+0x8>
    139a:	08 95       	ret

0000139c <readSequence>:
		CBI(PORTA.OUTCLR, 0);
}

// Reads the input sequence from the user to confirm that it is correct.
void readSequence(void)
{	
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
	for(i = 0; i < count; i++)
    13a0:	10 92 a8 21 	sts	0x21A8, r1
    13a4:	10 92 a9 21 	sts	0x21A9, r1
    13a8:	80 91 aa 21 	lds	r24, 0x21AA
    13ac:	90 91 ab 21 	lds	r25, 0x21AB
    13b0:	18 16       	cp	r1, r24
    13b2:	19 06       	cpc	r1, r25
    13b4:	64 f5       	brge	.+88     	; 0x140e <readSequence+0x72>
			gameOverIndicator = 1;
			break;
		}
		
		// Resets, so the game doesn't think an input has been received for the next sequence item
		lastButtonRead = -1;
    13b6:	cf ef       	ldi	r28, 0xFF	; 255
    13b8:	df ef       	ldi	r29, 0xFF	; 255
void readSequence(void)
{	
	for(i = 0; i < count; i++)
	{
		// Wait until an input is received from the user, eventually timeouts will have to taken into account and implemented
		waitForInput();
    13ba:	d2 df       	rcall	.-92     	; 0x1360 <waitForInput>
		
		// Take input and check if it is the current one in the sequence.
		if(lastButtonRead != memorySequence[i])
    13bc:	80 91 a8 21 	lds	r24, 0x21A8
    13c0:	90 91 a9 21 	lds	r25, 0x21A9
    13c4:	fc 01       	movw	r30, r24
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	ea 5e       	subi	r30, 0xEA	; 234
    13cc:	ff 4d       	sbci	r31, 0xDF	; 223
    13ce:	40 81       	ld	r20, Z
    13d0:	51 81       	ldd	r21, Z+1	; 0x01
    13d2:	20 91 12 20 	lds	r18, 0x2012
    13d6:	30 91 13 20 	lds	r19, 0x2013
    13da:	42 17       	cp	r20, r18
    13dc:	53 07       	cpc	r21, r19
    13de:	39 f0       	breq	.+14     	; 0x13ee <readSequence+0x52>
		{
			gameOverIndicator = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	80 93 a6 21 	sts	0x21A6, r24
    13e8:	90 93 a7 21 	sts	0x21A7, r25
			break;
    13ec:	10 c0       	rjmp	.+32     	; 0x140e <readSequence+0x72>
		}
		
		// Resets, so the game doesn't think an input has been received for the next sequence item
		lastButtonRead = -1;
    13ee:	c0 93 12 20 	sts	0x2012, r28
    13f2:	d0 93 13 20 	sts	0x2013, r29
}

// Reads the input sequence from the user to confirm that it is correct.
void readSequence(void)
{	
	for(i = 0; i < count; i++)
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	80 93 a8 21 	sts	0x21A8, r24
    13fc:	90 93 a9 21 	sts	0x21A9, r25
    1400:	20 91 aa 21 	lds	r18, 0x21AA
    1404:	30 91 ab 21 	lds	r19, 0x21AB
    1408:	82 17       	cp	r24, r18
    140a:	93 07       	cpc	r25, r19
    140c:	b4 f2       	brlt	.-84     	; 0x13ba <readSequence+0x1e>
		// Resets, so the game doesn't think an input has been received for the next sequence item
		lastButtonRead = -1;
	}
	
	// Disable buttons from being read
	cli();
    140e:	f8 94       	cli
}
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <run>:

// Called to run the game.
void run(void)
{
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
	int i;
	
	gameRun = 0;
    1422:	10 92 0a 20 	sts	0x200A, r1
    1426:	10 92 0b 20 	sts	0x200B, r1
	menuMode = 0;
    142a:	10 92 04 20 	sts	0x2004, r1
    142e:	10 92 05 20 	sts	0x2005, r1
	count = 0;
    1432:	10 92 aa 21 	sts	0x21AA, r1
    1436:	10 92 ab 21 	sts	0x21AB, r1
	gameOverIndicator = 0;
    143a:	10 92 a6 21 	sts	0x21A6, r1
    143e:	10 92 a7 21 	sts	0x21A7, r1
	lastButtonRead = -1;
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	9f ef       	ldi	r25, 0xFF	; 255
    1446:	80 93 12 20 	sts	0x2012, r24
    144a:	90 93 13 20 	sts	0x2013, r25
    144e:	c8 ec       	ldi	r28, 0xC8	; 200
    1450:	d0 e0       	ldi	r29, 0x00	; 0
    1452:	0f 2e       	mov	r0, r31
    1454:	fa e6       	ldi	r31, 0x6A	; 106
    1456:	ef 2e       	mov	r14, r31
    1458:	f0 2d       	mov	r31, r0
    145a:	68 94       	set
    145c:	ff 24       	eor	r15, r15
    145e:	f2 f8       	bld	r15, 2
    1460:	01 e0       	ldi	r16, 0x01	; 1
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	8e 2d       	mov	r24, r14
    1466:	9f 2d       	mov	r25, r15
    1468:	a0 2f       	mov	r26, r16
    146a:	b1 2f       	mov	r27, r17
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	a1 09       	sbc	r26, r1
    1470:	b1 09       	sbc	r27, r1
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	a1 05       	cpc	r26, r1
    1476:	b1 05       	cpc	r27, r1
    1478:	c9 f7       	brne	.-14     	; 0x146c <run+0x56>
	
	// Game loop
	for(i = 0; i < SEQUENCE_SIZE; i++)
	{
		delay_ms(200);
		inputReceived = 0;
    147a:	10 92 10 20 	sts	0x2010, r1
    147e:	10 92 11 20 	sts	0x2011, r1
		addSequenceElement();
    1482:	0e 94 12 02 	call	0x424	; 0x424 <addSequenceElement>
		displaySequence();
    1486:	da da       	rcall	.-2636   	; 0xa3c <displaySequence>
		
		// Enable interrupts
		sei();
    1488:	78 94       	sei
		
		// Reads to confirm the sequence
		readSequence();
    148a:	88 df       	rcall	.-240    	; 0x139c <readSequence>
		
		// Checks if the user has lost the game
 		if(gameOverIndicator == 1)
    148c:	80 91 a6 21 	lds	r24, 0x21A6
    1490:	90 91 a7 21 	lds	r25, 0x21A7
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	19 f4       	brne	.+6      	; 0x149e <run+0x88>
 		{
 			gameOver();
    1498:	0e 94 2b 02 	call	0x456	; 0x456 <gameOver>
 			break;
    149c:	03 c0       	rjmp	.+6      	; 0x14a4 <run+0x8e>
    149e:	21 97       	sbiw	r28, 0x01	; 1
	count = 0;
	gameOverIndicator = 0;
	lastButtonRead = -1;
	
	// Game loop
	for(i = 0; i < SEQUENCE_SIZE; i++)
    14a0:	20 97       	sbiw	r28, 0x00	; 0
    14a2:	01 f7       	brne	.-64     	; 0x1464 <run+0x4e>
 			break;
 		}
	}
	
	// Enable interrupts
	sei();
    14a4:	78 94       	sei
	
	return;
}
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	08 95       	ret

000014b4 <gameRunCheck>:
	return;
}

void gameRunCheck(void)
{
	if(crazyShit == 1)
    14b4:	80 91 0e 20 	lds	r24, 0x200E
    14b8:	90 91 0f 20 	lds	r25, 0x200F
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	a1 f4       	brne	.+40     	; 0x14e8 <gameRunCheck+0x34>
	{
		globalDelay = 50;
    14c0:	82 e3       	ldi	r24, 0x32	; 50
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	80 93 08 20 	sts	0x2008, r24
    14c8:	90 93 09 20 	sts	0x2009, r25
		toggleLight(getRandomNumber());
    14cc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <getRandomNumber>
    14d0:	27 d9       	rcall	.-3506   	; 0x720 <toggleLight>
		globalDelay = INIT_DELAY;
    14d2:	88 ec       	ldi	r24, 0xC8	; 200
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	80 93 08 20 	sts	0x2008, r24
    14da:	90 93 09 20 	sts	0x2009, r25
		gameRun = 0;
    14de:	10 92 0a 20 	sts	0x200A, r1
    14e2:	10 92 0b 20 	sts	0x200B, r1
    14e6:	08 95       	ret
	}
	
	else if (gameRun == 1)
    14e8:	80 91 0a 20 	lds	r24, 0x200A
    14ec:	90 91 0b 20 	lds	r25, 0x200B
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <gameRunCheck+0x42>
	{
		run();
    14f4:	90 cf       	rjmp	.-224    	; 0x1416 <run>
    14f6:	08 95       	ret

000014f8 <main>:

// Function definitions
// Program main entry point
int main(void)
{
	init();
    14f8:	cf d8       	rcall	.-3682   	; 0x698 <init>
	
	// Enable interrupts
	sei();
    14fa:	78 94       	sei
	
	// Always checks if the game is read to run
	while(1)
	{
		gameRunCheck();
    14fc:	db df       	rcall	.-74     	; 0x14b4 <gameRunCheck>
    14fe:	fe cf       	rjmp	.-4      	; 0x14fc <main+0x4>

00001500 <__divsf3>:
    1500:	0c d0       	rcall	.+24     	; 0x151a <__divsf3x>
    1502:	05 c1       	rjmp	.+522    	; 0x170e <__fp_round>
    1504:	fd d0       	rcall	.+506    	; 0x1700 <__fp_pscB>
    1506:	40 f0       	brcs	.+16     	; 0x1518 <__divsf3+0x18>
    1508:	f4 d0       	rcall	.+488    	; 0x16f2 <__fp_pscA>
    150a:	30 f0       	brcs	.+12     	; 0x1518 <__divsf3+0x18>
    150c:	21 f4       	brne	.+8      	; 0x1516 <__divsf3+0x16>
    150e:	5f 3f       	cpi	r21, 0xFF	; 255
    1510:	19 f0       	breq	.+6      	; 0x1518 <__divsf3+0x18>
    1512:	d6 c0       	rjmp	.+428    	; 0x16c0 <__fp_inf>
    1514:	51 11       	cpse	r21, r1
    1516:	2f c1       	rjmp	.+606    	; 0x1776 <__fp_szero>
    1518:	d9 c0       	rjmp	.+434    	; 0x16cc <__fp_nan>

0000151a <__divsf3x>:
    151a:	0a d1       	rcall	.+532    	; 0x1730 <__fp_split3>
    151c:	98 f3       	brcs	.-26     	; 0x1504 <__divsf3+0x4>

0000151e <__divsf3_pse>:
    151e:	99 23       	and	r25, r25
    1520:	c9 f3       	breq	.-14     	; 0x1514 <__divsf3+0x14>
    1522:	55 23       	and	r21, r21
    1524:	b1 f3       	breq	.-20     	; 0x1512 <__divsf3+0x12>
    1526:	95 1b       	sub	r25, r21
    1528:	55 0b       	sbc	r21, r21
    152a:	bb 27       	eor	r27, r27
    152c:	aa 27       	eor	r26, r26
    152e:	62 17       	cp	r22, r18
    1530:	73 07       	cpc	r23, r19
    1532:	84 07       	cpc	r24, r20
    1534:	38 f0       	brcs	.+14     	; 0x1544 <__divsf3_pse+0x26>
    1536:	9f 5f       	subi	r25, 0xFF	; 255
    1538:	5f 4f       	sbci	r21, 0xFF	; 255
    153a:	22 0f       	add	r18, r18
    153c:	33 1f       	adc	r19, r19
    153e:	44 1f       	adc	r20, r20
    1540:	aa 1f       	adc	r26, r26
    1542:	a9 f3       	breq	.-22     	; 0x152e <__divsf3_pse+0x10>
    1544:	33 d0       	rcall	.+102    	; 0x15ac <__divsf3_pse+0x8e>
    1546:	0e 2e       	mov	r0, r30
    1548:	3a f0       	brmi	.+14     	; 0x1558 <__divsf3_pse+0x3a>
    154a:	e0 e8       	ldi	r30, 0x80	; 128
    154c:	30 d0       	rcall	.+96     	; 0x15ae <__divsf3_pse+0x90>
    154e:	91 50       	subi	r25, 0x01	; 1
    1550:	50 40       	sbci	r21, 0x00	; 0
    1552:	e6 95       	lsr	r30
    1554:	00 1c       	adc	r0, r0
    1556:	ca f7       	brpl	.-14     	; 0x154a <__divsf3_pse+0x2c>
    1558:	29 d0       	rcall	.+82     	; 0x15ac <__divsf3_pse+0x8e>
    155a:	fe 2f       	mov	r31, r30
    155c:	27 d0       	rcall	.+78     	; 0x15ac <__divsf3_pse+0x8e>
    155e:	66 0f       	add	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	bb 1f       	adc	r27, r27
    1566:	26 17       	cp	r18, r22
    1568:	37 07       	cpc	r19, r23
    156a:	48 07       	cpc	r20, r24
    156c:	ab 07       	cpc	r26, r27
    156e:	b0 e8       	ldi	r27, 0x80	; 128
    1570:	09 f0       	breq	.+2      	; 0x1574 <__divsf3_pse+0x56>
    1572:	bb 0b       	sbc	r27, r27
    1574:	80 2d       	mov	r24, r0
    1576:	bf 01       	movw	r22, r30
    1578:	ff 27       	eor	r31, r31
    157a:	93 58       	subi	r25, 0x83	; 131
    157c:	5f 4f       	sbci	r21, 0xFF	; 255
    157e:	2a f0       	brmi	.+10     	; 0x158a <__divsf3_pse+0x6c>
    1580:	9e 3f       	cpi	r25, 0xFE	; 254
    1582:	51 05       	cpc	r21, r1
    1584:	68 f0       	brcs	.+26     	; 0x15a0 <__divsf3_pse+0x82>
    1586:	9c c0       	rjmp	.+312    	; 0x16c0 <__fp_inf>
    1588:	f6 c0       	rjmp	.+492    	; 0x1776 <__fp_szero>
    158a:	5f 3f       	cpi	r21, 0xFF	; 255
    158c:	ec f3       	brlt	.-6      	; 0x1588 <__divsf3_pse+0x6a>
    158e:	98 3e       	cpi	r25, 0xE8	; 232
    1590:	dc f3       	brlt	.-10     	; 0x1588 <__divsf3_pse+0x6a>
    1592:	86 95       	lsr	r24
    1594:	77 95       	ror	r23
    1596:	67 95       	ror	r22
    1598:	b7 95       	ror	r27
    159a:	f7 95       	ror	r31
    159c:	9f 5f       	subi	r25, 0xFF	; 255
    159e:	c9 f7       	brne	.-14     	; 0x1592 <__divsf3_pse+0x74>
    15a0:	88 0f       	add	r24, r24
    15a2:	91 1d       	adc	r25, r1
    15a4:	96 95       	lsr	r25
    15a6:	87 95       	ror	r24
    15a8:	97 f9       	bld	r25, 7
    15aa:	08 95       	ret
    15ac:	e1 e0       	ldi	r30, 0x01	; 1
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	bb 1f       	adc	r27, r27
    15b6:	62 17       	cp	r22, r18
    15b8:	73 07       	cpc	r23, r19
    15ba:	84 07       	cpc	r24, r20
    15bc:	ba 07       	cpc	r27, r26
    15be:	20 f0       	brcs	.+8      	; 0x15c8 <__divsf3_pse+0xaa>
    15c0:	62 1b       	sub	r22, r18
    15c2:	73 0b       	sbc	r23, r19
    15c4:	84 0b       	sbc	r24, r20
    15c6:	ba 0b       	sbc	r27, r26
    15c8:	ee 1f       	adc	r30, r30
    15ca:	88 f7       	brcc	.-30     	; 0x15ae <__divsf3_pse+0x90>
    15cc:	e0 95       	com	r30
    15ce:	08 95       	ret

000015d0 <__fixsfdi>:
    15d0:	be e3       	ldi	r27, 0x3E	; 62
    15d2:	04 d0       	rcall	.+8      	; 0x15dc <__fixunssfdi+0x2>
    15d4:	08 f4       	brcc	.+2      	; 0x15d8 <__fixsfdi+0x8>
    15d6:	90 e8       	ldi	r25, 0x80	; 128
    15d8:	08 95       	ret

000015da <__fixunssfdi>:
    15da:	bf e3       	ldi	r27, 0x3F	; 63
    15dc:	22 27       	eor	r18, r18
    15de:	33 27       	eor	r19, r19
    15e0:	a9 01       	movw	r20, r18
    15e2:	ae d0       	rcall	.+348    	; 0x1740 <__fp_splitA>
    15e4:	58 f1       	brcs	.+86     	; 0x163c <__fixunssfdi+0x62>
    15e6:	9f 57       	subi	r25, 0x7F	; 127
    15e8:	40 f1       	brcs	.+80     	; 0x163a <__fixunssfdi+0x60>
    15ea:	b9 17       	cp	r27, r25
    15ec:	38 f1       	brcs	.+78     	; 0x163c <__fixunssfdi+0x62>
    15ee:	bf e3       	ldi	r27, 0x3F	; 63
    15f0:	b9 1b       	sub	r27, r25
    15f2:	99 27       	eor	r25, r25
    15f4:	b8 50       	subi	r27, 0x08	; 8
    15f6:	3a f4       	brpl	.+14     	; 0x1606 <__fixunssfdi+0x2c>
    15f8:	66 0f       	add	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	b3 95       	inc	r27
    1602:	d2 f3       	brmi	.-12     	; 0x15f8 <__fixunssfdi+0x1e>
    1604:	16 c0       	rjmp	.+44     	; 0x1632 <__fixunssfdi+0x58>
    1606:	b8 50       	subi	r27, 0x08	; 8
    1608:	4a f0       	brmi	.+18     	; 0x161c <__fixunssfdi+0x42>
    160a:	23 2f       	mov	r18, r19
    160c:	34 2f       	mov	r19, r20
    160e:	45 2f       	mov	r20, r21
    1610:	56 2f       	mov	r21, r22
    1612:	67 2f       	mov	r22, r23
    1614:	78 2f       	mov	r23, r24
    1616:	88 27       	eor	r24, r24
    1618:	b8 50       	subi	r27, 0x08	; 8
    161a:	ba f7       	brpl	.-18     	; 0x160a <__fixunssfdi+0x30>
    161c:	b8 5f       	subi	r27, 0xF8	; 248
    161e:	49 f0       	breq	.+18     	; 0x1632 <__fixunssfdi+0x58>
    1620:	86 95       	lsr	r24
    1622:	77 95       	ror	r23
    1624:	67 95       	ror	r22
    1626:	57 95       	ror	r21
    1628:	47 95       	ror	r20
    162a:	37 95       	ror	r19
    162c:	27 95       	ror	r18
    162e:	ba 95       	dec	r27
    1630:	b9 f7       	brne	.-18     	; 0x1620 <__fixunssfdi+0x46>
    1632:	0e f4       	brtc	.+2      	; 0x1636 <__fixunssfdi+0x5c>
    1634:	4e d0       	rcall	.+156    	; 0x16d2 <__fp_negdi>
    1636:	88 94       	clc
    1638:	08 95       	ret
    163a:	88 94       	clc
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	cb 01       	movw	r24, r22
    1642:	08 95       	ret

00001644 <__floatundisf>:
    1644:	e8 94       	clt

00001646 <__fp_di2sf>:
    1646:	f9 2f       	mov	r31, r25
    1648:	96 eb       	ldi	r25, 0xB6	; 182
    164a:	ff 23       	and	r31, r31
    164c:	81 f0       	breq	.+32     	; 0x166e <__fp_di2sf+0x28>
    164e:	12 16       	cp	r1, r18
    1650:	13 06       	cpc	r1, r19
    1652:	14 06       	cpc	r1, r20
    1654:	44 0b       	sbc	r20, r20
    1656:	93 95       	inc	r25
    1658:	f6 95       	lsr	r31
    165a:	87 95       	ror	r24
    165c:	77 95       	ror	r23
    165e:	67 95       	ror	r22
    1660:	57 95       	ror	r21
    1662:	40 40       	sbci	r20, 0x00	; 0
    1664:	ff 23       	and	r31, r31
    1666:	b9 f7       	brne	.-18     	; 0x1656 <__fp_di2sf+0x10>
    1668:	1b c0       	rjmp	.+54     	; 0x16a0 <__fp_di2sf+0x5a>
    166a:	99 27       	eor	r25, r25
    166c:	08 95       	ret
    166e:	88 23       	and	r24, r24
    1670:	51 f4       	brne	.+20     	; 0x1686 <__fp_di2sf+0x40>
    1672:	98 50       	subi	r25, 0x08	; 8
    1674:	d2 f7       	brpl	.-12     	; 0x166a <__fp_di2sf+0x24>
    1676:	87 2b       	or	r24, r23
    1678:	76 2f       	mov	r23, r22
    167a:	65 2f       	mov	r22, r21
    167c:	54 2f       	mov	r21, r20
    167e:	43 2f       	mov	r20, r19
    1680:	32 2f       	mov	r19, r18
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	b1 f3       	breq	.-20     	; 0x1672 <__fp_di2sf+0x2c>
    1686:	12 16       	cp	r1, r18
    1688:	13 06       	cpc	r1, r19
    168a:	14 06       	cpc	r1, r20
    168c:	44 0b       	sbc	r20, r20
    168e:	88 23       	and	r24, r24
    1690:	3a f0       	brmi	.+14     	; 0x16a0 <__fp_di2sf+0x5a>
    1692:	9a 95       	dec	r25
    1694:	44 0f       	add	r20, r20
    1696:	55 1f       	adc	r21, r21
    1698:	66 1f       	adc	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	88 1f       	adc	r24, r24
    169e:	ca f7       	brpl	.-14     	; 0x1692 <__fp_di2sf+0x4c>
    16a0:	55 23       	and	r21, r21
    16a2:	4a f4       	brpl	.+18     	; 0x16b6 <__fp_di2sf+0x70>
    16a4:	44 0f       	add	r20, r20
    16a6:	55 1f       	adc	r21, r21
    16a8:	11 f4       	brne	.+4      	; 0x16ae <__fp_di2sf+0x68>
    16aa:	60 ff       	sbrs	r22, 0
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <__fp_di2sf+0x70>
    16ae:	6f 5f       	subi	r22, 0xFF	; 255
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	8f 4f       	sbci	r24, 0xFF	; 255
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	88 0f       	add	r24, r24
    16b8:	96 95       	lsr	r25
    16ba:	87 95       	ror	r24
    16bc:	97 f9       	bld	r25, 7
    16be:	08 95       	ret

000016c0 <__fp_inf>:
    16c0:	97 f9       	bld	r25, 7
    16c2:	9f 67       	ori	r25, 0x7F	; 127
    16c4:	80 e8       	ldi	r24, 0x80	; 128
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	08 95       	ret

000016cc <__fp_nan>:
    16cc:	9f ef       	ldi	r25, 0xFF	; 255
    16ce:	80 ec       	ldi	r24, 0xC0	; 192
    16d0:	08 95       	ret

000016d2 <__fp_negdi>:
    16d2:	90 95       	com	r25
    16d4:	80 95       	com	r24
    16d6:	70 95       	com	r23
    16d8:	60 95       	com	r22
    16da:	50 95       	com	r21
    16dc:	40 95       	com	r20
    16de:	30 95       	com	r19
    16e0:	21 95       	neg	r18
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	4f 4f       	sbci	r20, 0xFF	; 255
    16e6:	5f 4f       	sbci	r21, 0xFF	; 255
    16e8:	6f 4f       	sbci	r22, 0xFF	; 255
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	8f 4f       	sbci	r24, 0xFF	; 255
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	08 95       	ret

000016f2 <__fp_pscA>:
    16f2:	00 24       	eor	r0, r0
    16f4:	0a 94       	dec	r0
    16f6:	16 16       	cp	r1, r22
    16f8:	17 06       	cpc	r1, r23
    16fa:	18 06       	cpc	r1, r24
    16fc:	09 06       	cpc	r0, r25
    16fe:	08 95       	ret

00001700 <__fp_pscB>:
    1700:	00 24       	eor	r0, r0
    1702:	0a 94       	dec	r0
    1704:	12 16       	cp	r1, r18
    1706:	13 06       	cpc	r1, r19
    1708:	14 06       	cpc	r1, r20
    170a:	05 06       	cpc	r0, r21
    170c:	08 95       	ret

0000170e <__fp_round>:
    170e:	09 2e       	mov	r0, r25
    1710:	03 94       	inc	r0
    1712:	00 0c       	add	r0, r0
    1714:	11 f4       	brne	.+4      	; 0x171a <__fp_round+0xc>
    1716:	88 23       	and	r24, r24
    1718:	52 f0       	brmi	.+20     	; 0x172e <__fp_round+0x20>
    171a:	bb 0f       	add	r27, r27
    171c:	40 f4       	brcc	.+16     	; 0x172e <__fp_round+0x20>
    171e:	bf 2b       	or	r27, r31
    1720:	11 f4       	brne	.+4      	; 0x1726 <__fp_round+0x18>
    1722:	60 ff       	sbrs	r22, 0
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__fp_round+0x20>
    1726:	6f 5f       	subi	r22, 0xFF	; 255
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	8f 4f       	sbci	r24, 0xFF	; 255
    172c:	9f 4f       	sbci	r25, 0xFF	; 255
    172e:	08 95       	ret

00001730 <__fp_split3>:
    1730:	57 fd       	sbrc	r21, 7
    1732:	90 58       	subi	r25, 0x80	; 128
    1734:	44 0f       	add	r20, r20
    1736:	55 1f       	adc	r21, r21
    1738:	59 f0       	breq	.+22     	; 0x1750 <__fp_splitA+0x10>
    173a:	5f 3f       	cpi	r21, 0xFF	; 255
    173c:	71 f0       	breq	.+28     	; 0x175a <__fp_splitA+0x1a>
    173e:	47 95       	ror	r20

00001740 <__fp_splitA>:
    1740:	88 0f       	add	r24, r24
    1742:	97 fb       	bst	r25, 7
    1744:	99 1f       	adc	r25, r25
    1746:	61 f0       	breq	.+24     	; 0x1760 <__fp_splitA+0x20>
    1748:	9f 3f       	cpi	r25, 0xFF	; 255
    174a:	79 f0       	breq	.+30     	; 0x176a <__fp_splitA+0x2a>
    174c:	87 95       	ror	r24
    174e:	08 95       	ret
    1750:	12 16       	cp	r1, r18
    1752:	13 06       	cpc	r1, r19
    1754:	14 06       	cpc	r1, r20
    1756:	55 1f       	adc	r21, r21
    1758:	f2 cf       	rjmp	.-28     	; 0x173e <__fp_split3+0xe>
    175a:	46 95       	lsr	r20
    175c:	f1 df       	rcall	.-30     	; 0x1740 <__fp_splitA>
    175e:	08 c0       	rjmp	.+16     	; 0x1770 <__fp_splitA+0x30>
    1760:	16 16       	cp	r1, r22
    1762:	17 06       	cpc	r1, r23
    1764:	18 06       	cpc	r1, r24
    1766:	99 1f       	adc	r25, r25
    1768:	f1 cf       	rjmp	.-30     	; 0x174c <__fp_splitA+0xc>
    176a:	86 95       	lsr	r24
    176c:	71 05       	cpc	r23, r1
    176e:	61 05       	cpc	r22, r1
    1770:	08 94       	sec
    1772:	08 95       	ret

00001774 <__fp_zero>:
    1774:	e8 94       	clt

00001776 <__fp_szero>:
    1776:	bb 27       	eor	r27, r27
    1778:	66 27       	eor	r22, r22
    177a:	77 27       	eor	r23, r23
    177c:	cb 01       	movw	r24, r22
    177e:	97 f9       	bld	r25, 7
    1780:	08 95       	ret

00001782 <__ashldi3>:
    1782:	0f 93       	push	r16
    1784:	08 30       	cpi	r16, 0x08	; 8
    1786:	90 f0       	brcs	.+36     	; 0x17ac <__ashldi3+0x2a>
    1788:	98 2f       	mov	r25, r24
    178a:	87 2f       	mov	r24, r23
    178c:	76 2f       	mov	r23, r22
    178e:	65 2f       	mov	r22, r21
    1790:	54 2f       	mov	r21, r20
    1792:	43 2f       	mov	r20, r19
    1794:	32 2f       	mov	r19, r18
    1796:	22 27       	eor	r18, r18
    1798:	08 50       	subi	r16, 0x08	; 8
    179a:	f4 cf       	rjmp	.-24     	; 0x1784 <__ashldi3+0x2>
    179c:	22 0f       	add	r18, r18
    179e:	33 1f       	adc	r19, r19
    17a0:	44 1f       	adc	r20, r20
    17a2:	55 1f       	adc	r21, r21
    17a4:	66 1f       	adc	r22, r22
    17a6:	77 1f       	adc	r23, r23
    17a8:	88 1f       	adc	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	0a 95       	dec	r16
    17ae:	b2 f7       	brpl	.-20     	; 0x179c <__ashldi3+0x1a>
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <__adddi3>:
    17b4:	2a 0d       	add	r18, r10
    17b6:	3b 1d       	adc	r19, r11
    17b8:	4c 1d       	adc	r20, r12
    17ba:	5d 1d       	adc	r21, r13
    17bc:	6e 1d       	adc	r22, r14
    17be:	7f 1d       	adc	r23, r15
    17c0:	80 1f       	adc	r24, r16
    17c2:	91 1f       	adc	r25, r17
    17c4:	08 95       	ret

000017c6 <__subdi3>:
    17c6:	2a 19       	sub	r18, r10
    17c8:	3b 09       	sbc	r19, r11
    17ca:	4c 09       	sbc	r20, r12
    17cc:	5d 09       	sbc	r21, r13
    17ce:	6e 09       	sbc	r22, r14
    17d0:	7f 09       	sbc	r23, r15
    17d2:	80 0b       	sbc	r24, r16
    17d4:	91 0b       	sbc	r25, r17
    17d6:	08 95       	ret

000017d8 <do_rand>:
    17d8:	8f 92       	push	r8
    17da:	9f 92       	push	r9
    17dc:	af 92       	push	r10
    17de:	bf 92       	push	r11
    17e0:	cf 92       	push	r12
    17e2:	df 92       	push	r13
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	ec 01       	movw	r28, r24
    17ee:	68 81       	ld	r22, Y
    17f0:	79 81       	ldd	r23, Y+1	; 0x01
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	9b 81       	ldd	r25, Y+3	; 0x03
    17f6:	61 15       	cp	r22, r1
    17f8:	71 05       	cpc	r23, r1
    17fa:	81 05       	cpc	r24, r1
    17fc:	91 05       	cpc	r25, r1
    17fe:	21 f4       	brne	.+8      	; 0x1808 <do_rand+0x30>
    1800:	64 e2       	ldi	r22, 0x24	; 36
    1802:	79 ed       	ldi	r23, 0xD9	; 217
    1804:	8b e5       	ldi	r24, 0x5B	; 91
    1806:	97 e0       	ldi	r25, 0x07	; 7
    1808:	2d e1       	ldi	r18, 0x1D	; 29
    180a:	33 ef       	ldi	r19, 0xF3	; 243
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	6d d0       	rcall	.+218    	; 0x18ec <__divmodsi4>
    1812:	49 01       	movw	r8, r18
    1814:	5a 01       	movw	r10, r20
    1816:	9b 01       	movw	r18, r22
    1818:	ac 01       	movw	r20, r24
    181a:	a7 ea       	ldi	r26, 0xA7	; 167
    181c:	b1 e4       	ldi	r27, 0x41	; 65
    181e:	82 d0       	rcall	.+260    	; 0x1924 <__muluhisi3>
    1820:	6b 01       	movw	r12, r22
    1822:	7c 01       	movw	r14, r24
    1824:	ac ee       	ldi	r26, 0xEC	; 236
    1826:	b4 ef       	ldi	r27, 0xF4	; 244
    1828:	a5 01       	movw	r20, r10
    182a:	94 01       	movw	r18, r8
    182c:	87 d0       	rcall	.+270    	; 0x193c <__mulohisi3>
    182e:	c6 0e       	add	r12, r22
    1830:	d7 1e       	adc	r13, r23
    1832:	e8 1e       	adc	r14, r24
    1834:	f9 1e       	adc	r15, r25
    1836:	f7 fe       	sbrs	r15, 7
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <do_rand+0x6e>
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	c8 1a       	sub	r12, r24
    183e:	d1 08       	sbc	r13, r1
    1840:	e1 08       	sbc	r14, r1
    1842:	80 e8       	ldi	r24, 0x80	; 128
    1844:	f8 0a       	sbc	r15, r24
    1846:	c8 82       	st	Y, r12
    1848:	d9 82       	std	Y+1, r13	; 0x01
    184a:	ea 82       	std	Y+2, r14	; 0x02
    184c:	fb 82       	std	Y+3, r15	; 0x03
    184e:	c6 01       	movw	r24, r12
    1850:	9f 77       	andi	r25, 0x7F	; 127
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	ff 90       	pop	r15
    1858:	ef 90       	pop	r14
    185a:	df 90       	pop	r13
    185c:	cf 90       	pop	r12
    185e:	bf 90       	pop	r11
    1860:	af 90       	pop	r10
    1862:	9f 90       	pop	r9
    1864:	8f 90       	pop	r8
    1866:	08 95       	ret

00001868 <rand_r>:
    1868:	b7 cf       	rjmp	.-146    	; 0x17d8 <do_rand>

0000186a <rand>:
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e2       	ldi	r25, 0x20	; 32
    186e:	b4 cf       	rjmp	.-152    	; 0x17d8 <do_rand>

00001870 <srand>:
    1870:	a0 e0       	ldi	r26, 0x00	; 0
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	80 93 00 20 	sts	0x2000, r24
    1878:	90 93 01 20 	sts	0x2001, r25
    187c:	a0 93 02 20 	sts	0x2002, r26
    1880:	b0 93 03 20 	sts	0x2003, r27
    1884:	08 95       	ret

00001886 <__eerd_byte_x256a3bu>:
    1886:	03 d0       	rcall	.+6      	; 0x188e <eeprom_mapen>
    1888:	80 81       	ld	r24, Z
    188a:	99 27       	eor	r25, r25
    188c:	08 95       	ret

0000188e <eeprom_mapen>:
    188e:	e0 ec       	ldi	r30, 0xC0	; 192
    1890:	f1 e0       	ldi	r31, 0x01	; 1
    1892:	37 85       	ldd	r19, Z+15	; 0x0f
    1894:	37 fd       	sbrc	r19, 7
    1896:	fd cf       	rjmp	.-6      	; 0x1892 <eeprom_mapen+0x4>
    1898:	34 85       	ldd	r19, Z+12	; 0x0c
    189a:	38 60       	ori	r19, 0x08	; 8
    189c:	34 87       	std	Z+12, r19	; 0x0c
    189e:	fc 01       	movw	r30, r24
    18a0:	e0 50       	subi	r30, 0x00	; 0
    18a2:	f0 4f       	sbci	r31, 0xF0	; 240
    18a4:	08 95       	ret

000018a6 <__eewr_byte_x256a3bu>:
    18a6:	26 2f       	mov	r18, r22

000018a8 <__eewr_r18_x256a3bu>:
    18a8:	e0 ec       	ldi	r30, 0xC0	; 192
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    18ac:	37 85       	ldd	r19, Z+15	; 0x0f
    18ae:	37 fd       	sbrc	r19, 7
    18b0:	fd cf       	rjmp	.-6      	; 0x18ac <__eewr_r18_x256a3bu+0x4>
    18b2:	34 85       	ldd	r19, Z+12	; 0x0c
    18b4:	37 7f       	andi	r19, 0xF7	; 247
    18b6:	34 87       	std	Z+12, r19	; 0x0c
    18b8:	37 85       	ldd	r19, Z+15	; 0x0f
    18ba:	31 ff       	sbrs	r19, 1
    18bc:	09 c0       	rjmp	.+18     	; 0x18d0 <__eewr_r18_x256a3bu+0x28>
    18be:	36 e3       	ldi	r19, 0x36	; 54
    18c0:	32 87       	std	Z+10, r19	; 0x0a
    18c2:	38 ed       	ldi	r19, 0xD8	; 216
    18c4:	34 bf       	out	0x34, r19	; 52
    18c6:	31 e0       	ldi	r19, 0x01	; 1
    18c8:	33 87       	std	Z+11, r19	; 0x0b
    18ca:	37 85       	ldd	r19, Z+15	; 0x0f
    18cc:	37 fd       	sbrc	r19, 7
    18ce:	fd cf       	rjmp	.-6      	; 0x18ca <__eewr_r18_x256a3bu+0x22>
    18d0:	33 e3       	ldi	r19, 0x33	; 51
    18d2:	32 87       	std	Z+10, r19	; 0x0a
    18d4:	80 83       	st	Z, r24
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	12 82       	std	Z+2, r1	; 0x02
    18da:	24 83       	std	Z+4, r18	; 0x04
    18dc:	25 e3       	ldi	r18, 0x35	; 53
    18de:	22 87       	std	Z+10, r18	; 0x0a
    18e0:	28 ed       	ldi	r18, 0xD8	; 216
    18e2:	31 e0       	ldi	r19, 0x01	; 1
    18e4:	24 bf       	out	0x34, r18	; 52
    18e6:	33 87       	std	Z+11, r19	; 0x0b
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	08 95       	ret

000018ec <__divmodsi4>:
    18ec:	05 2e       	mov	r0, r21
    18ee:	97 fb       	bst	r25, 7
    18f0:	16 f4       	brtc	.+4      	; 0x18f6 <__divmodsi4+0xa>
    18f2:	00 94       	com	r0
    18f4:	0f d0       	rcall	.+30     	; 0x1914 <__negsi2>
    18f6:	57 fd       	sbrc	r21, 7
    18f8:	05 d0       	rcall	.+10     	; 0x1904 <__divmodsi4_neg2>
    18fa:	24 d0       	rcall	.+72     	; 0x1944 <__udivmodsi4>
    18fc:	07 fc       	sbrc	r0, 7
    18fe:	02 d0       	rcall	.+4      	; 0x1904 <__divmodsi4_neg2>
    1900:	46 f4       	brtc	.+16     	; 0x1912 <__divmodsi4_exit>
    1902:	08 c0       	rjmp	.+16     	; 0x1914 <__negsi2>

00001904 <__divmodsi4_neg2>:
    1904:	50 95       	com	r21
    1906:	40 95       	com	r20
    1908:	30 95       	com	r19
    190a:	21 95       	neg	r18
    190c:	3f 4f       	sbci	r19, 0xFF	; 255
    190e:	4f 4f       	sbci	r20, 0xFF	; 255
    1910:	5f 4f       	sbci	r21, 0xFF	; 255

00001912 <__divmodsi4_exit>:
    1912:	08 95       	ret

00001914 <__negsi2>:
    1914:	90 95       	com	r25
    1916:	80 95       	com	r24
    1918:	70 95       	com	r23
    191a:	61 95       	neg	r22
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	08 95       	ret

00001924 <__muluhisi3>:
    1924:	31 d0       	rcall	.+98     	; 0x1988 <__umulhisi3>
    1926:	a5 9f       	mul	r26, r21
    1928:	90 0d       	add	r25, r0
    192a:	b4 9f       	mul	r27, r20
    192c:	90 0d       	add	r25, r0
    192e:	a4 9f       	mul	r26, r20
    1930:	80 0d       	add	r24, r0
    1932:	91 1d       	adc	r25, r1
    1934:	11 24       	eor	r1, r1
    1936:	08 95       	ret

00001938 <__mulshisi3>:
    1938:	b7 ff       	sbrs	r27, 7
    193a:	f4 cf       	rjmp	.-24     	; 0x1924 <__muluhisi3>

0000193c <__mulohisi3>:
    193c:	f3 df       	rcall	.-26     	; 0x1924 <__muluhisi3>
    193e:	82 1b       	sub	r24, r18
    1940:	93 0b       	sbc	r25, r19
    1942:	08 95       	ret

00001944 <__udivmodsi4>:
    1944:	a1 e2       	ldi	r26, 0x21	; 33
    1946:	1a 2e       	mov	r1, r26
    1948:	aa 1b       	sub	r26, r26
    194a:	bb 1b       	sub	r27, r27
    194c:	fd 01       	movw	r30, r26
    194e:	0d c0       	rjmp	.+26     	; 0x196a <__udivmodsi4_ep>

00001950 <__udivmodsi4_loop>:
    1950:	aa 1f       	adc	r26, r26
    1952:	bb 1f       	adc	r27, r27
    1954:	ee 1f       	adc	r30, r30
    1956:	ff 1f       	adc	r31, r31
    1958:	a2 17       	cp	r26, r18
    195a:	b3 07       	cpc	r27, r19
    195c:	e4 07       	cpc	r30, r20
    195e:	f5 07       	cpc	r31, r21
    1960:	20 f0       	brcs	.+8      	; 0x196a <__udivmodsi4_ep>
    1962:	a2 1b       	sub	r26, r18
    1964:	b3 0b       	sbc	r27, r19
    1966:	e4 0b       	sbc	r30, r20
    1968:	f5 0b       	sbc	r31, r21

0000196a <__udivmodsi4_ep>:
    196a:	66 1f       	adc	r22, r22
    196c:	77 1f       	adc	r23, r23
    196e:	88 1f       	adc	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	1a 94       	dec	r1
    1974:	69 f7       	brne	.-38     	; 0x1950 <__udivmodsi4_loop>
    1976:	60 95       	com	r22
    1978:	70 95       	com	r23
    197a:	80 95       	com	r24
    197c:	90 95       	com	r25
    197e:	9b 01       	movw	r18, r22
    1980:	ac 01       	movw	r20, r24
    1982:	bd 01       	movw	r22, r26
    1984:	cf 01       	movw	r24, r30
    1986:	08 95       	ret

00001988 <__umulhisi3>:
    1988:	a2 9f       	mul	r26, r18
    198a:	b0 01       	movw	r22, r0
    198c:	b3 9f       	mul	r27, r19
    198e:	c0 01       	movw	r24, r0
    1990:	a3 9f       	mul	r26, r19
    1992:	70 0d       	add	r23, r0
    1994:	81 1d       	adc	r24, r1
    1996:	11 24       	eor	r1, r1
    1998:	91 1d       	adc	r25, r1
    199a:	b2 9f       	mul	r27, r18
    199c:	70 0d       	add	r23, r0
    199e:	81 1d       	adc	r24, r1
    19a0:	11 24       	eor	r1, r1
    19a2:	91 1d       	adc	r25, r1
    19a4:	08 95       	ret

000019a6 <_exit>:
    19a6:	f8 94       	cli

000019a8 <__stop_program>:
    19a8:	ff cf       	rjmp	.-2      	; 0x19a8 <__stop_program>
